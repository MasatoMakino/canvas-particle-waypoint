"use strict";(self.webpackChunk_masatomakino_canvas_particle_waypoint=self.webpackChunk_masatomakino_canvas_particle_waypoint||[]).push([[736],{137:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "jP": () => (/* reexport */ BezierUtil),\n  "s2": () => (/* reexport */ GenerationMode),\n  "hp": () => (/* reexport */ Particle),\n  "F8": () => (/* reexport */ ParticleGenerator),\n  "mG": () => (/* reexport */ ParticleWay)\n});\n\n// UNUSED EXPORTS: GenerationModeEventType, GenerationModeManager, MultipleParticleWays, MultipleParticleWaysOption, ParticleContainer, ParticleGeneratorOption, WaySelectType\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/Particle.js\n/**\n * パーティクルを表すクラス。\n * このクラス自体には描画のための機能はない。\n * 各種の描画ライブラリと組み合わせて利用する。\n */\nclass Particle {\n    /**\n     * 指定されたパスに沿って移動するパーティクルを生成する。\n     * @param path\n     */\n    constructor(path) {\n        this._ratio = 0.0;\n        this._visible = true;\n        this.path = path;\n    }\n    /**\n     * パーティクルの位置を更新する。\n     * @param t パーティクルのパス上の位置。入力に制限はないが、ParticleWay側で0.0~1.0の間に丸め込まれる。\n     * @return n ease関数で補正済みのt。\n     */\n    update(t) {\n        this._ratio = t;\n        if (this.ease == null) {\n            return this._ratio;\n        }\n        return this.ease(this._ratio);\n    }\n    /**\n     * パーティクル位置を指定された量移動する。\n     * @param t 移動量 0.0 ~ 1.0\n     */\n    add(t) {\n        return this.update(this._ratio + t);\n    }\n    /**\n     * 現在位置を取得する\n     * @return number\n     */\n    get ratio() {\n        return this._ratio;\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(value) {\n        this._visible = value;\n    }\n    dispose() { }\n}\nParticle.MAX_RATIO = 1.0;\nParticle.MIN_RATIO = 0.0;\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/BezierUtil.js\n\nclass BezierUtil {\n    /**\n     * ベジェ曲線の中間座標を取得する。\n     *\n     * @param t 媒介変数 0.0 ~ 1.0\n     * @param from 始点\n     * @param c1 コントロールポイント1\n     * @param c2 コントロールポイント2\n     * @param to 終点\n     */\n    static getPoint(t, from, c1, c2, to) {\n        const addPoint = (p1, p2, coefficient) => {\n            p1[0] += coefficient * p2[0];\n            p1[1] += coefficient * p2[1];\n        };\n        const result = [0, 0];\n        const difT = 1 - t;\n        let v = Math.pow(difT, 3);\n        addPoint(result, from, v);\n        v = 3 * Math.pow(difT, 2) * t;\n        addPoint(result, c1, v);\n        v = 3 * Math.pow(t, 2) * difT;\n        addPoint(result, c2, v);\n        v = Math.pow(t, 3);\n        addPoint(result, to, v);\n        return result;\n    }\n    /**\n     * ベジェ曲線描画コマンドから、ベジェ曲線の中間座標を取得する。\n     * @param t\n     * @param command1 始点側の描画コマンド 要素数2もしくは6の配列\n     * @param command2 終点側の描画コマンド 要素数6の配列\n     */\n    static getPointFromCommand(t, command1, command2) {\n        return this.getPoint(t, command1.slice(-2), command2.slice(0, 2), command2.slice(2, 4), command2.slice(-2));\n    }\n    /**\n     * ベジェ曲線の長さを取得する。\n     * divの数だけベジェ曲線を分割し、直線の集合として距離を測る。\n     *\n     * @param from 始点\n     * @param c1 コントロールポイント1\n     * @param c2 コントロールポイント2\n     * @param to 終点\n     * @param div 分割数 多いほど精度が向上し、計算負荷は上昇する。 既定値16\n     */\n    static getLength(from, c1, c2, to, div = 16) {\n        let result = 0;\n        let prevPoint;\n        for (let i = 0; i < div + 1; i++) {\n            const p = this.getPoint(i / div, from, c1, c2, to);\n            if (prevPoint) {\n                result += ParticleWay.getDistance(prevPoint, p);\n            }\n            prevPoint = p;\n        }\n        return result;\n    }\n    /**\n     * ベジェ曲線描画コマンドから、ベジェ曲線の長さを取得する。\n     *\n     * @param command1 始点側の描画コマンド 要素数2もしくは6の配列\n     * @param command2 終点側の描画コマンド 要素数6の配列\n     * @param div 分割数 多いほど精度が向上し、計算負荷は上昇する。 既定値16\n     */\n    static getLengthFromCommand(command1, command2, div = 16) {\n        return this.getLength(command1.slice(-2), command2.slice(0, 2), command2.slice(2, 4), command2.slice(-2), div);\n    }\n    /**\n     * 3次ベジェ曲線を2次元座標の配列に分解する。\n     * @param commands\n     * @param div 分割数 デフォルトは16\n     */\n    static subdivide(commands, div = 16) {\n        const points = [];\n        for (let i = 1; i < commands.length; i++) {\n            let sub = this.subdivideSubPath(commands[i - 1], commands[i], div);\n            if (i !== 1) {\n                sub = sub.slice(1);\n            }\n            points.push(...sub);\n        }\n        return points;\n    }\n    static subdivideSubPath(command1, command2, div = 16) {\n        const points = [];\n        for (let i = 0; i < div + 1; i++) {\n            points.push(this.getPointFromCommand(i / div, command1, command2));\n        }\n        return points;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/ParticleWay.js\n/**\n * 中間点の座標の算出が可能な経路を表すクラス\n */\n\n\nclass ParticleWay {\n    /**\n     * コンストラクタ\n     * @param points 経路を表す座標の配列。要素数によってどのようなパスかが判定される。\n     *   要素数2 : 2次元パス\n     *   要素数3 : 3次元パス\n     *   要素数6 : 平面3次元ベジェ曲線\n     */\n    constructor(points) {\n        this.name = "";\n        this.points = points;\n    }\n    /**\n     * 経路の座標配列を更新する。\n     * @param points\n     */\n    set points(points) {\n        this._points = points;\n        this.onSetPoints();\n    }\n    warnPoints() {\n        if (this._points.length === 0) {\n            console.warn("ParticleWay : 長さゼロの配列が指定されました。座標が算出できないため、getPoint関数は常にnullを返します。");\n        }\n        if (this._points.length === 1) {\n            console.warn("ParticleWay : 長さ1の配列が指定されました。座標が算出できないため、getPoint関数は常に固定の座標を返します。");\n        }\n    }\n    /**\n     * pointsが更新された際の処理。\n     * set pointsをトリガーにして実行される。\n     */\n    onSetPoints() {\n        this.warnPoints();\n        const sumTable = new Array(this._points.length).fill(0);\n        this._points.forEach((val, index, array) => {\n            if (index === 0)\n                return;\n            sumTable[index] =\n                ParticleWay.getDistance(array[index - 1], val) + sumTable[index - 1];\n        });\n        const total = sumTable[sumTable.length - 1];\n        this._ratioTable = sumTable.map((val) => {\n            return val / total;\n        });\n    }\n    get points() {\n        return this._points;\n    }\n    /**\n     * 2点間の距離を取得する。\n     * @param pos1\n     * @param pos2\n     */\n    static getDistance(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        switch (pos2.length) {\n            case 6:\n                return BezierUtil.getLengthFromCommand(pos1, pos2);\n            case 3:\n                const dz = pos2[2] - pos1[2];\n                return Math.sqrt(dx * dx + dy * dy + dz * dz);\n            case 2:\n                return Math.sqrt(dx * dx + dy * dy);\n        }\n    }\n    /**\n     * 経路上の中間点座標を取得する。\n     * @param t 算出する座標の位置。0.0(始点) ~ 1.0(終点)の間。\n     */\n    getPoint(t) {\n        t = ParticleWayUtil.clampRatio(t);\n        const limited = this.getLimitPoint(t);\n        if (limited !== false)\n            return limited;\n        const i = ParticleWayUtil.getTIndex(t, this._ratioTable);\n        const floorPoint = this._points[i];\n        const ceilPoint = this._points[i + 1];\n        const ratioBase = this._ratioTable[i];\n        return this.getCenterPoint(floorPoint, ceilPoint, (t - ratioBase) / (this._ratioTable[i + 1] - ratioBase));\n    }\n    /**\n     * getPointのうち、制限にかかる値を取得する。\n     * @param t\n     * @private\n     */\n    getLimitPoint(t) {\n        if (!this._points || this._points.length === 0) {\n            return null;\n        }\n        if (t === Particle.MAX_RATIO) {\n            return ParticleWayUtil.getPositionWithMaxT(this._points);\n        }\n        if (this._points.length === 1 || t === Particle.MIN_RATIO) {\n            return [...this._points[0]];\n        }\n        return false;\n    }\n    /**\n     * 線分上の中間点座標を取得する\n     * @param pos1 線分の始点\n     * @param pos2 線分の終点\n     * @param t 算出する座標の位置。0.0(始点) ~ 1.0(終点)の間。\n     */\n    getCenterPoint(pos1, pos2, t) {\n        const rt = 1.0 - t;\n        let pos = [pos1[0] * rt + pos2[0] * t, pos1[1] * rt + pos2[1] * t];\n        switch (pos2.length) {\n            case 6:\n                return BezierUtil.getPointFromCommand(t, pos1, pos2);\n            case 3:\n                pos.push(pos1[2] * rt + pos2[2] * t);\n                return pos;\n            case 2:\n                return pos;\n        }\n    }\n}\nclass ParticleWayUtil {\n    static clamp(val, max, min) {\n        return Math.min(Math.max(val, min), max);\n    }\n    static clampRatio(val) {\n        return this.clamp(val, Particle.MAX_RATIO, Particle.MIN_RATIO);\n    }\n    static getPositionWithMaxT(points) {\n        const n = points.length;\n        let result = points[n - 1];\n        if (result.length === 6) {\n            result = result.slice(-2);\n        }\n        return [...result];\n    }\n    static getTIndex(t, ratioTable) {\n        let i = 1;\n        const n = ratioTable.length;\n        for (i; i < n; i++) {\n            if (ratioTable[i] >= t)\n                break;\n        }\n        i--;\n        return i;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js\nvar eventemitter3 = __webpack_require__(34);\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/GenerationModeManager.js\n\nvar GenerationMode;\n(function (GenerationMode) {\n    /**\n     * パーティクルを随時生成する\n     */\n    GenerationMode[GenerationMode["SEQUENTIAL"] = 0] = "SEQUENTIAL";\n    /**\n     * 終端にたどり着いたパーティクルを巻き戻して再利用する\n     */\n    GenerationMode[GenerationMode["LOOP"] = 1] = "LOOP";\n})(GenerationMode || (GenerationMode = {}));\nvar GenerationModeEventType;\n(function (GenerationModeEventType) {\n    GenerationModeEventType["change"] = "GenerationModeEventType_Change";\n})(GenerationModeEventType || (GenerationModeEventType = {}));\nclass GenerationModeManager extends eventemitter3.EventEmitter {\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        if (value === this._mode)\n            return;\n        this._mode = value;\n        this.emit(GenerationModeEventType.change, this._mode);\n    }\n    constructor() {\n        super();\n        this._mode = GenerationMode.SEQUENTIAL;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/MultipleParticleWays.js\nvar WaySelectType;\n(function (WaySelectType) {\n    WaySelectType[WaySelectType["Random"] = 0] = "Random";\n    WaySelectType[WaySelectType["Sequential"] = 1] = "Sequential";\n})(WaySelectType || (WaySelectType = {}));\n/**\n * このクラスは、ParticleGeneratorに設定された複数の経路を管理するためのものです。\n */\nclass MultipleParticleWays {\n    constructor(option) {\n        this.waySelectionCount = 0;\n        MultipleParticleWaysOption.initOption(option);\n        this.ways = option.ways;\n        this.waySelectType = option.type;\n    }\n    countUp() {\n        this.waySelectionCount = (this.waySelectionCount + 1) % this.ways.length;\n    }\n    getParticleWay() {\n        let index;\n        switch (this.waySelectType) {\n            case WaySelectType.Sequential:\n                index = this.waySelectionCount;\n                break;\n            case WaySelectType.Random:\n                index = Math.floor(Math.random() * this.ways.length);\n                break;\n        }\n        return this.ways[index];\n    }\n}\nclass MultipleParticleWaysOption {\n    static initOption(option) {\n        var _a, _b;\n        option !== null && option !== void 0 ? option : (option = {});\n        (_a = option.ways) !== null && _a !== void 0 ? _a : (option.ways = []);\n        if (!Array.isArray(option.ways)) {\n            option.ways = [option.ways];\n        }\n        (_b = option.type) !== null && _b !== void 0 ? _b : (option.type = WaySelectType.Sequential);\n        return option;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/ParticleGeneratorUtility.js\n/**\n * ParticleGeneratorで利用する各種の値を算出するヘルパークラス\n */\nclass ParticleGeneratorUtility {\n    /**\n     * パーティクルの生成インターバルと経路上の数から、移動速度を算出する\n     * @param interval\n     * @param particleNum\n     */\n    static getSpeed(interval, particleNum) {\n        return (1.0 / (interval * particleNum)) * 1000;\n    }\n    /**\n     * パーティクルの移動速度と経路上の数から、生成インターバルを算出する\n     * @param speed\n     * @param particleNum\n     */\n    static getInterval(speed, particleNum) {\n        return (1.0 / speed / particleNum) * 1000;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/ParticleAnimator.js\n\n\nclass ParticleAnimator {\n    get generationInterval() {\n        return this._generationInterval;\n    }\n    set generationInterval(value) {\n        if (this._generationInterval === value)\n            return;\n        this._generationInterval = value;\n        if (this._modeManager.mode === GenerationMode.LOOP) {\n            console.warn("ParticleGenerator : ループ指定中にパーティクル生成間隔を再設定しても反映されません。設定を反映するためにパーティクルを削除して再生成してください。");\n            console.trace();\n        }\n    }\n    get ease() {\n        return this._ease;\n    }\n    constructor(modeManager, particleContainer) {\n        this._generationInterval = 300;\n        this.speedPerSec = 0.07;\n        this._particleContainer = particleContainer;\n        this._modeManager = modeManager;\n    }\n    /**\n     * 生成インターバルと経路上のパーティクル数から移動スピードを算出し設定する。\n     * loop時に破綻しない値が得られる。\n     * @param interval\n     * @param particleNum\n     */\n    setSpeed(interval, particleNum) {\n        this._generationInterval = interval;\n        this.speedPerSec = ParticleGeneratorUtility.getSpeed(interval, particleNum);\n    }\n    /**\n     * 移動スピードと経路上のパーティクル数から生成インターバルを算出し設定する。\n     * loop時に破綻しない値が得られる。\n     * @param speed\n     * @param particleNum\n     */\n    setGenerationInterval(speed, particleNum) {\n        this.speedPerSec = speed;\n        this._generationInterval = ParticleGeneratorUtility.getInterval(speed, particleNum);\n    }\n    /**\n     * パーティクルの位置を経過時間分移動する。\n     * @param delta 前回アニメーションが実行されてからの経過時間 単位ms\n     */\n    move(delta) {\n        const movement = (delta / 1000) * this.speedPerSec;\n        this._particleContainer.move(movement);\n    }\n    /**\n     * 各パーティクルのEase関数を更新する。\n     * @param ease イージング関数。\n     * @param override 現存するパーティクルのEase関数を上書きするか否か。規定値はtrue。\n     */\n    updateEase(ease, override = true) {\n        this._ease = ease;\n        if (!override && this._modeManager.mode === GenerationMode.LOOP) {\n            console.warn("ParticleGenerator : ループ指定中にEase関数を再設定すると、既存のパーティクルのEase関数は常に上書きされます。");\n            console.trace();\n        }\n        if (override || this._modeManager.mode === GenerationMode.LOOP) {\n            this._particleContainer.overrideEase(ease);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/ParticleContainer.js\n\n/**\n * 複数のパーティクルを格納、移動、管理するためのクラスです。\n *\n * 主にParticleGeneratorで生成されたパーティクルを管理します。\n * @see {@link ParticleGenerator}\n */\nclass ParticleContainer {\n    get particles() {\n        return this._particles;\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(value) {\n        this._visible = value;\n        this._particles.forEach((p) => {\n            p.visible = this._visible;\n        });\n    }\n    constructor(modeManager) {\n        this._particles = [];\n        this._visible = true;\n        modeManager.on(GenerationModeEventType.change, (mode) => {\n            if (mode === GenerationMode.LOOP) {\n                this.removeAll();\n            }\n        });\n    }\n    /**\n     * パーティクルを格納する。\n     * @param particle\n     */\n    add(particle) {\n        this._particles.push(particle);\n        particle.visible = this._visible;\n    }\n    /**\n     * 格納されたすべてのパーティクルを移動させる。\n     * @see {@link Particle.add}\n     * @param t\n     */\n    move(t) {\n        this._particles.forEach((p) => {\n            p.add(t);\n        });\n    }\n    /**\n     * 寿命切れのパーティクルを一括で削除する。\n     */\n    removeCompletedParticles() {\n        const removed = this._particles\n            .filter((p) => {\n            return p.ratio >= 1.0;\n        })\n            .forEach((p) => {\n            p.dispose();\n        });\n        this._particles = this._particles.filter((p) => {\n            return p.ratio < 1.0;\n        });\n    }\n    /**\n     * 指定されたパーティクルを削除する。\n     * @param particle\n     */\n    remove(particle) {\n        const i = this._particles.indexOf(particle);\n        const popped = this._particles.splice(i, 1);\n        popped.forEach((val) => {\n            val.dispose();\n        });\n    }\n    /**\n     * 格納されたすべてのパーティクルを削除する。\n     */\n    removeAll() {\n        this._particles.forEach((p) => {\n            p.dispose();\n        });\n        this._particles = [];\n    }\n    /**\n     * 終端にたどり着いたパーティクルを始点に巻き戻す。\n     */\n    rollupParticles() {\n        this._particles.forEach((p) => {\n            p.update(p.ratio % 1);\n        });\n    }\n    overrideEase(ease) {\n        this._particles.forEach((p) => {\n            p.ease = ease;\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/ParticleValve.js\n\n/**\n * パーティクル新規生成のバルブ開閉を行うクラス\n * @see {@link ParticleGenerator}\n */\nclass ParticleValve {\n    get isOpen() {\n        return this._isOpen;\n    }\n    constructor(modeManager) {\n        this._isOpen = true;\n        this._modeManager = modeManager;\n    }\n    /**\n     * パーティクル生成を開始する。\n     */\n    open() {\n        if (this._isOpen)\n            return;\n        this._isOpen = true;\n        this.warnUpdateValveMode();\n    }\n    /**\n     * パーティクル生成を停止する。\n     * アニメーションは続行される。\n     */\n    close() {\n        if (!this._isOpen)\n            return;\n        this._isOpen = false;\n        this.warnUpdateValveMode();\n    }\n    warnUpdateValveMode() {\n        if (this._modeManager.mode !== GenerationMode.LOOP)\n            return;\n        console.warn("ParticleGenerator : ループ指定中にバルブ開閉操作を行いました。この操作はループ指定中には反映されません。");\n        console.trace();\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/generator/ParticleGenerator.js\n\n\n\n\n\n\n\n/**\n * 一定間隔でパーティクルを生成し、アニメーションさせるクラス。\n * パーティクルインスタンスの生成と管理を行う。\n */\nclass ParticleGenerator {\n    get isPlaying() {\n        return this._isPlaying;\n    }\n    /**\n     * コンストラクタ\n     * @param path\n     * @param option\n     */\n    constructor(path, option) {\n        this._isPlaying = false;\n        /**\n         * 前回パーティクル生成時からの経過時間 単位ms\n         * @private\n         */\n        this.elapsedFromGenerate = 0;\n        this._isDisposed = false;\n        /**\n         * パーティクルをアニメーションさせる。\n         * @param e\n         */\n        this.animate = (e) => {\n            if (this._isDisposed)\n                return;\n            this.animator.move(e.delta);\n            this.particleContainer.removeCompletedParticles();\n            this.addParticle(e.delta);\n        };\n        /**\n         * パーティクルをループアニメーションさせる。\n         * @param e\n         */\n        this.loop = (e) => {\n            if (this._isDisposed)\n                return;\n            if (this.particleContainer.particles.length === 0) {\n                this.generateAll();\n            }\n            this.animator.move(e.delta);\n            this.particleContainer.rollupParticles();\n        };\n        this.modeManager = new GenerationModeManager();\n        this.multipleWays = new MultipleParticleWays({ ways: path });\n        this.particleContainer = new ParticleContainer(this.modeManager);\n        this.valve = new ParticleValve(this.modeManager);\n        this.animator = new ParticleAnimator(this.modeManager, this.particleContainer);\n        this.modeManager.on(GenerationModeEventType.change, (val) => {\n            if (this._isPlaying) {\n                this.stop();\n                this.play();\n            }\n        });\n        option = ParticleGeneratorOption.initOption(option);\n        this.modeManager.mode = option.generationMode;\n        this.animator.updateEase(option.ease);\n        this.probability = option.probability;\n    }\n    /**\n     * パーティクルアニメーションを開始する。\n     */\n    play() {\n        if (this._isPlaying)\n            return;\n        this._isPlaying = true;\n        switch (this.modeManager.mode) {\n            case GenerationMode.LOOP:\n                esm/* RAFTicker.addListener */.Fz.addListener(esm/* RAFTickerEventType.tick */.M9.tick, this.loop);\n                break;\n            case GenerationMode.SEQUENTIAL:\n                esm/* RAFTicker.addListener */.Fz.addListener(esm/* RAFTickerEventType.tick */.M9.tick, this.animate);\n                break;\n        }\n    }\n    /**\n     * パーティクルアニメーションを停止する。\n     */\n    stop() {\n        if (!this._isPlaying)\n            return;\n        this._isPlaying = false;\n        esm/* RAFTicker.removeListener */.Fz.removeListener(esm/* RAFTickerEventType.tick */.M9.tick, this.loop);\n        esm/* RAFTicker.removeListener */.Fz.removeListener(esm/* RAFTickerEventType.tick */.M9.tick, this.animate);\n    }\n    /**\n     * アニメーションに伴い、新規パーティクルを追加する。\n     * @param delta\n     */\n    addParticle(delta) {\n        if (!this.valve.isOpen)\n            return;\n        const anim = this.animator;\n        this.elapsedFromGenerate += delta;\n        while (this.elapsedFromGenerate > anim.generationInterval) {\n            this.elapsedFromGenerate -= anim.generationInterval;\n            const move = (this.elapsedFromGenerate * anim.speedPerSec) / 1000;\n            //すでに寿命切れのパーティクルは生成をスキップ。\n            if (move > Particle.MAX_RATIO) {\n                continue;\n            }\n            const particle = this.generate();\n            particle === null || particle === void 0 ? void 0 : particle.add(move);\n        }\n    }\n    /**\n     * パーティクルを1つ追加する。\n     */\n    generate() {\n        this.multipleWays.countUp();\n        //発生確率に応じて生成の可否を判定する。\n        if (this.probability !== 1.0) {\n            if (Math.random() > this.probability)\n                return null;\n        }\n        const path = this.multipleWays.getParticleWay();\n        const particle = this.generateParticle(path);\n        if (this.animator.ease != null) {\n            particle.ease = this.animator.ease;\n        }\n        this.particleContainer.add(particle);\n        return particle;\n    }\n    /**\n     * パーティクルを生成する。\n     * generate関数の内部処理。\n     * @param path\n     */\n    generateParticle(path) {\n        const particle = new Particle(path);\n        //TODO ここでコンテナに挿入。\n        return particle;\n    }\n    /**\n     * 経路上にパーティクルを敷き詰める。\n     */\n    generateAll() {\n        //パーティクルの最大生存期間 単位ミリ秒\n        let lifeTime = 1000.0 / this.animator.speedPerSec;\n        while (lifeTime > 0.0) {\n            const particle = this.generate();\n            if (particle)\n                particle.update((lifeTime / 1000) * this.animator.speedPerSec);\n            lifeTime -= this.animator.generationInterval;\n        }\n        this.elapsedFromGenerate = 0;\n    }\n    /**\n     * パーティクル生成の停止とパーティクルの破棄を行う。\n     */\n    dispose() {\n        this.stop();\n        this._isDisposed = true;\n        this.particleContainer.removeAll();\n        this.particleContainer = null;\n        this.multipleWays = null;\n    }\n}\n/**\n * パーティクル生成方法を指定するオプション\n */\nclass ParticleGeneratorOption {\n    static initOption(option) {\n        var _a, _b;\n        option !== null && option !== void 0 ? option : (option = {});\n        (_a = option.generationMode) !== null && _a !== void 0 ? _a : (option.generationMode = GenerationMode.SEQUENTIAL);\n        (_b = option.probability) !== null && _b !== void 0 ? _b : (option.probability = 1.0);\n        return option;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/index.js\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2xENEM7QUFDckM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0EsMEJBQTBCLHVCQUF1QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM1RkE7QUFDQTtBQUNBO0FBQ3NDO0FBQ0k7QUFDbkM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0JBQStCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0EsK0NBQStDLGtCQUFrQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsOEJBQThCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQixFQUFFLGtCQUFrQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3JKNkM7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUNsQztBQUNQO0FBQ0E7QUFDQSxDQUFDLDBEQUEwRDtBQUNwRCxvQ0FBb0MsMEJBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDOUJPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDdkM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwQnlEO0FBQ2E7QUFDL0Q7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxtQkFBbUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlDQUFpQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELG1CQUFtQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsbUJBQW1CO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBOzs7QUNuRW1GO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4QkFBOEI7QUFDckQseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7OztBQy9GeUQ7QUFDekQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLG1CQUFtQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0QzBFO0FBQ25DO0FBQ21FO0FBQzVDO0FBQ1I7QUFDRTtBQUNSO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxQkFBcUI7QUFDcEQsZ0NBQWdDLG9CQUFvQixHQUFHLFlBQVk7QUFDbkUscUNBQXFDLGlCQUFpQjtBQUN0RCx5QkFBeUIsYUFBYTtBQUN0Qyw0QkFBNEIsZ0JBQWdCO0FBQzVDLDRCQUE0Qiw4QkFBOEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDLGdCQUFnQiw2Q0FBcUIsQ0FBQyx3Q0FBdUI7QUFDN0Q7QUFDQSxpQkFBaUIseUJBQXlCO0FBQzFDLGdCQUFnQiw2Q0FBcUIsQ0FBQyx3Q0FBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG1EQUF3QixDQUFDLHdDQUF1QjtBQUN4RCxRQUFRLG1EQUF3QixDQUFDLHdDQUF1QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRSwrRkFBK0YseUJBQXlCO0FBQ3hIO0FBQ0E7QUFDQTtBQUNBOzs7QUNsTDJCO0FBQ0c7QUFDRDtBQUNpQjtBQUNHO0FBQ0g7QUFDSSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL1BhcnRpY2xlLmpzP2U0M2UiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jYW52YXMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvQG1hc2F0b21ha2luby9wYXJ0aWNsZS13YXlwb2ludC9lc20vQmV6aWVyVXRpbC5qcz84YTA1Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL1BhcnRpY2xlV2F5LmpzPzUxYzYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jYW52YXMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvQG1hc2F0b21ha2luby9wYXJ0aWNsZS13YXlwb2ludC9lc20vZ2VuZXJhdG9yL0dlbmVyYXRpb25Nb2RlTWFuYWdlci5qcz9iZWEwIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL2dlbmVyYXRvci9NdWx0aXBsZVBhcnRpY2xlV2F5cy5qcz83NTNmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL2dlbmVyYXRvci9QYXJ0aWNsZUdlbmVyYXRvclV0aWxpdHkuanM/Mjk5OCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL2NhbnZhcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9AbWFzYXRvbWFraW5vL3BhcnRpY2xlLXdheXBvaW50L2VzbS9nZW5lcmF0b3IvUGFydGljbGVBbmltYXRvci5qcz9hY2UwIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL2dlbmVyYXRvci9QYXJ0aWNsZUNvbnRhaW5lci5qcz85ZTJjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vY2FudmFzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL0BtYXNhdG9tYWtpbm8vcGFydGljbGUtd2F5cG9pbnQvZXNtL2dlbmVyYXRvci9QYXJ0aWNsZVZhbHZlLmpzPzk5YTgiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jYW52YXMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvQG1hc2F0b21ha2luby9wYXJ0aWNsZS13YXlwb2ludC9lc20vZ2VuZXJhdG9yL1BhcnRpY2xlR2VuZXJhdG9yLmpzPzliYTEiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jYW52YXMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvQG1hc2F0b21ha2luby9wYXJ0aWNsZS13YXlwb2ludC9lc20vaW5kZXguanM/N2Q2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOODkeODvOODhuOCo+OCr+ODq+OCkuihqOOBmeOCr+ODqeOCueOAglxuICog44GT44Gu44Kv44Op44K56Ieq5L2T44Gr44Gv5o+P55S744Gu44Gf44KB44Gu5qmf6IO944Gv44Gq44GE44CCXG4gKiDlkITnqK7jga7mj4/nlLvjg6njgqTjg5bjg6njg6rjgajntYTjgb/lkIjjgo/jgZvjgabliKnnlKjjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRpY2xlIHtcbiAgICAvKipcbiAgICAgKiDmjIflrprjgZXjgozjgZ/jg5Hjgrnjgavmsr/jgaPjgabnp7vli5XjgZnjgovjg5Hjg7zjg4bjgqPjgq/jg6vjgpLnlJ/miJDjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gcGF0aFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhdGgpIHtcbiAgICAgICAgdGhpcy5fcmF0aW8gPSAwLjA7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vjga7kvY3nva7jgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdCDjg5Hjg7zjg4bjgqPjgq/jg6vjga7jg5HjgrnkuIrjga7kvY3nva7jgILlhaXlipvjgavliLbpmZDjga/jgarjgYTjgYzjgIFQYXJ0aWNsZVdheeWBtOOBpzAuMH4xLjDjga7plpPjgavkuLjjgoHovrzjgb7jgozjgovjgIJcbiAgICAgKiBAcmV0dXJuIG4gZWFzZemWouaVsOOBp+ijnOato+a4iOOBv+OBrnTjgIJcbiAgICAgKi9cbiAgICB1cGRhdGUodCkge1xuICAgICAgICB0aGlzLl9yYXRpbyA9IHQ7XG4gICAgICAgIGlmICh0aGlzLmVhc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVhc2UodGhpcy5fcmF0aW8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vkvY3nva7jgpLmjIflrprjgZXjgozjgZ/ph4/np7vli5XjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdCDnp7vli5Xph48gMC4wIH4gMS4wXG4gICAgICovXG4gICAgYWRkKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKHRoaXMuX3JhdGlvICsgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4gbnVtYmVyXG4gICAgICovXG4gICAgZ2V0IHJhdGlvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF0aW87XG4gICAgfVxuICAgIGdldCB2aXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICB9XG4gICAgc2V0IHZpc2libGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHZhbHVlO1xuICAgIH1cbiAgICBkaXNwb3NlKCkgeyB9XG59XG5QYXJ0aWNsZS5NQVhfUkFUSU8gPSAxLjA7XG5QYXJ0aWNsZS5NSU5fUkFUSU8gPSAwLjA7XG4iLCJpbXBvcnQgeyBQYXJ0aWNsZVdheSB9IGZyb20gXCIuL1BhcnRpY2xlV2F5XCI7XG5leHBvcnQgY2xhc3MgQmV6aWVyVXRpbCB7XG4gICAgLyoqXG4gICAgICog44OZ44K444Kn5puy57ea44Gu5Lit6ZaT5bqn5qiZ44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdCDlqpLku4vlpInmlbAgMC4wIH4gMS4wXG4gICAgICogQHBhcmFtIGZyb20g5aeL54K5XG4gICAgICogQHBhcmFtIGMxIOOCs+ODs+ODiOODreODvOODq+ODneOCpOODs+ODiDFcbiAgICAgKiBAcGFyYW0gYzIg44Kz44Oz44OI44Ot44O844Or44Od44Kk44Oz44OIMlxuICAgICAqIEBwYXJhbSB0byDntYLngrlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UG9pbnQodCwgZnJvbSwgYzEsIGMyLCB0bykge1xuICAgICAgICBjb25zdCBhZGRQb2ludCA9IChwMSwgcDIsIGNvZWZmaWNpZW50KSA9PiB7XG4gICAgICAgICAgICBwMVswXSArPSBjb2VmZmljaWVudCAqIHAyWzBdO1xuICAgICAgICAgICAgcDFbMV0gKz0gY29lZmZpY2llbnQgKiBwMlsxXTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gWzAsIDBdO1xuICAgICAgICBjb25zdCBkaWZUID0gMSAtIHQ7XG4gICAgICAgIGxldCB2ID0gTWF0aC5wb3coZGlmVCwgMyk7XG4gICAgICAgIGFkZFBvaW50KHJlc3VsdCwgZnJvbSwgdik7XG4gICAgICAgIHYgPSAzICogTWF0aC5wb3coZGlmVCwgMikgKiB0O1xuICAgICAgICBhZGRQb2ludChyZXN1bHQsIGMxLCB2KTtcbiAgICAgICAgdiA9IDMgKiBNYXRoLnBvdyh0LCAyKSAqIGRpZlQ7XG4gICAgICAgIGFkZFBvaW50KHJlc3VsdCwgYzIsIHYpO1xuICAgICAgICB2ID0gTWF0aC5wb3codCwgMyk7XG4gICAgICAgIGFkZFBvaW50KHJlc3VsdCwgdG8sIHYpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5njgrjjgqfmm7Lnt5rmj4/nlLvjgrPjg57jg7Pjg4njgYvjgonjgIHjg5njgrjjgqfmm7Lnt5rjga7kuK3plpPluqfmqJnjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdFxuICAgICAqIEBwYXJhbSBjb21tYW5kMSDlp4vngrnlgbTjga7mj4/nlLvjgrPjg57jg7Pjg4kg6KaB57Sg5pWwMuOCguOBl+OBj+OBrzbjga7phY3liJdcbiAgICAgKiBAcGFyYW0gY29tbWFuZDIg57WC54K55YG044Gu5o+P55S744Kz44Oe44Oz44OJIOimgee0oOaVsDbjga7phY3liJdcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UG9pbnRGcm9tQ29tbWFuZCh0LCBjb21tYW5kMSwgY29tbWFuZDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnQodCwgY29tbWFuZDEuc2xpY2UoLTIpLCBjb21tYW5kMi5zbGljZSgwLCAyKSwgY29tbWFuZDIuc2xpY2UoMiwgNCksIGNvbW1hbmQyLnNsaWNlKC0yKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODmeOCuOOCp+absue3muOBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIGRpduOBruaVsOOBoOOBkeODmeOCuOOCp+absue3muOCkuWIhuWJsuOBl+OAgeebtOe3muOBrumbhuWQiOOBqOOBl+OBpui3nembouOCkua4rOOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGZyb20g5aeL54K5XG4gICAgICogQHBhcmFtIGMxIOOCs+ODs+ODiOODreODvOODq+ODneOCpOODs+ODiDFcbiAgICAgKiBAcGFyYW0gYzIg44Kz44Oz44OI44Ot44O844Or44Od44Kk44Oz44OIMlxuICAgICAqIEBwYXJhbSB0byDntYLngrlcbiAgICAgKiBAcGFyYW0gZGl2IOWIhuWJsuaVsCDlpJrjgYTjgbvjgannsr7luqbjgYzlkJHkuIrjgZfjgIHoqIjnrpfosqDojbfjga/kuIrmmIfjgZnjgovjgIIg5pei5a6a5YCkMTZcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TGVuZ3RoKGZyb20sIGMxLCBjMiwgdG8sIGRpdiA9IDE2KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBsZXQgcHJldlBvaW50O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpdiArIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMuZ2V0UG9pbnQoaSAvIGRpdiwgZnJvbSwgYzEsIGMyLCB0byk7XG4gICAgICAgICAgICBpZiAocHJldlBvaW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFBhcnRpY2xlV2F5LmdldERpc3RhbmNlKHByZXZQb2ludCwgcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2UG9pbnQgPSBwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODmeOCuOOCp+absue3muaPj+eUu+OCs+ODnuODs+ODieOBi+OCieOAgeODmeOCuOOCp+absue3muOBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbW1hbmQxIOWni+eCueWBtOOBruaPj+eUu+OCs+ODnuODs+ODiSDopoHntKDmlbAy44KC44GX44GP44GvNuOBrumFjeWIl1xuICAgICAqIEBwYXJhbSBjb21tYW5kMiDntYLngrnlgbTjga7mj4/nlLvjgrPjg57jg7Pjg4kg6KaB57Sg5pWwNuOBrumFjeWIl1xuICAgICAqIEBwYXJhbSBkaXYg5YiG5Ymy5pWwIOWkmuOBhOOBu+OBqeeyvuW6puOBjOWQkeS4iuOBl+OAgeioiOeul+iyoOiNt+OBr+S4iuaYh+OBmeOCi+OAgiDml6LlrprlgKQxNlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRMZW5ndGhGcm9tQ29tbWFuZChjb21tYW5kMSwgY29tbWFuZDIsIGRpdiA9IDE2KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExlbmd0aChjb21tYW5kMS5zbGljZSgtMiksIGNvbW1hbmQyLnNsaWNlKDAsIDIpLCBjb21tYW5kMi5zbGljZSgyLCA0KSwgY29tbWFuZDIuc2xpY2UoLTIpLCBkaXYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAz5qyh44OZ44K444Kn5puy57ea44KSMuasoeWFg+W6p+aomeOBrumFjeWIl+OBq+WIhuino+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSBjb21tYW5kc1xuICAgICAqIEBwYXJhbSBkaXYg5YiG5Ymy5pWwIOODh+ODleOCqeODq+ODiOOBrzE2XG4gICAgICovXG4gICAgc3RhdGljIHN1YmRpdmlkZShjb21tYW5kcywgZGl2ID0gMTYpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzdWIgPSB0aGlzLnN1YmRpdmlkZVN1YlBhdGgoY29tbWFuZHNbaSAtIDFdLCBjb21tYW5kc1tpXSwgZGl2KTtcbiAgICAgICAgICAgIGlmIChpICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgc3ViID0gc3ViLnNsaWNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnRzLnB1c2goLi4uc3ViKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH1cbiAgICBzdGF0aWMgc3ViZGl2aWRlU3ViUGF0aChjb21tYW5kMSwgY29tbWFuZDIsIGRpdiA9IDE2KSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpdiArIDE7IGkrKykge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2godGhpcy5nZXRQb2ludEZyb21Db21tYW5kKGkgLyBkaXYsIGNvbW1hbmQxLCBjb21tYW5kMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxufVxuIiwiLyoqXG4gKiDkuK3plpPngrnjga7luqfmqJnjga7nrpflh7rjgYzlj6/og73jgarntYzot6/jgpLooajjgZnjgq/jg6njgrlcbiAqL1xuaW1wb3J0IHsgUGFydGljbGUgfSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xuaW1wb3J0IHsgQmV6aWVyVXRpbCB9IGZyb20gXCIuL0JlemllclV0aWxcIjtcbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZVdheSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIHBvaW50cyDntYzot6/jgpLooajjgZnluqfmqJnjga7phY3liJfjgILopoHntKDmlbDjgavjgojjgaPjgabjganjga7jgojjgYbjgarjg5HjgrnjgYvjgYzliKTlrprjgZXjgozjgovjgIJcbiAgICAgKiAgIOimgee0oOaVsDIgOiAy5qyh5YWD44OR44K5XG4gICAgICogICDopoHntKDmlbAzIDogM+asoeWFg+ODkeOCuVxuICAgICAqICAg6KaB57Sg5pWwNiA6IOW5s+mdojPmrKHlhYPjg5njgrjjgqfmm7Lnt5pcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb2ludHMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOe1jOi3r+OBruW6p+aomemFjeWIl+OCkuabtOaWsOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwb2ludHNcbiAgICAgKi9cbiAgICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIHRoaXMub25TZXRQb2ludHMoKTtcbiAgICB9XG4gICAgd2FyblBvaW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlBhcnRpY2xlV2F5IDog6ZW344GV44K844Ot44Gu6YWN5YiX44GM5oyH5a6a44GV44KM44G+44GX44Gf44CC5bqn5qiZ44GM566X5Ye644Gn44GN44Gq44GE44Gf44KB44CBZ2V0UG9pbnTplqLmlbDjga/luLjjgatudWxs44KS6L+U44GX44G+44GZ44CCXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQYXJ0aWNsZVdheSA6IOmVt+OBlTHjga7phY3liJfjgYzmjIflrprjgZXjgozjgb7jgZfjgZ/jgILluqfmqJnjgYznrpflh7rjgafjgY3jgarjgYTjgZ/jgoHjgIFnZXRQb2ludOmWouaVsOOBr+W4uOOBq+WbuuWumuOBruW6p+aomeOCkui/lOOBl+OBvuOBmeOAglwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBwb2ludHPjgYzmm7TmlrDjgZXjgozjgZ/pmpvjga7lh6bnkIbjgIJcbiAgICAgKiBzZXQgcG9pbnRz44KS44OI44Oq44Ks44O844Gr44GX44Gm5a6f6KGM44GV44KM44KL44CCXG4gICAgICovXG4gICAgb25TZXRQb2ludHMoKSB7XG4gICAgICAgIHRoaXMud2FyblBvaW50cygpO1xuICAgICAgICBjb25zdCBzdW1UYWJsZSA9IG5ldyBBcnJheSh0aGlzLl9wb2ludHMubGVuZ3RoKS5maWxsKDApO1xuICAgICAgICB0aGlzLl9wb2ludHMuZm9yRWFjaCgodmFsLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzdW1UYWJsZVtpbmRleF0gPVxuICAgICAgICAgICAgICAgIFBhcnRpY2xlV2F5LmdldERpc3RhbmNlKGFycmF5W2luZGV4IC0gMV0sIHZhbCkgKyBzdW1UYWJsZVtpbmRleCAtIDFdO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdG90YWwgPSBzdW1UYWJsZVtzdW1UYWJsZS5sZW5ndGggLSAxXTtcbiAgICAgICAgdGhpcy5fcmF0aW9UYWJsZSA9IHN1bVRhYmxlLm1hcCgodmFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsIC8gdG90YWw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgcG9pbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAy54K56ZaT44Gu6Led6Zui44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHBhcmFtIHBvczFcbiAgICAgKiBAcGFyYW0gcG9zMlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREaXN0YW5jZShwb3MxLCBwb3MyKSB7XG4gICAgICAgIGNvbnN0IGR4ID0gcG9zMlswXSAtIHBvczFbMF07XG4gICAgICAgIGNvbnN0IGR5ID0gcG9zMlsxXSAtIHBvczFbMV07XG4gICAgICAgIHN3aXRjaCAocG9zMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQmV6aWVyVXRpbC5nZXRMZW5ndGhGcm9tQ29tbWFuZChwb3MxLCBwb3MyKTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjb25zdCBkeiA9IHBvczJbMl0gLSBwb3MxWzJdO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6KTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDntYzot6/kuIrjga7kuK3plpPngrnluqfmqJnjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdCDnrpflh7rjgZnjgovluqfmqJnjga7kvY3nva7jgIIwLjAo5aeL54K5KSB+IDEuMCjntYLngrkp44Gu6ZaT44CCXG4gICAgICovXG4gICAgZ2V0UG9pbnQodCkge1xuICAgICAgICB0ID0gUGFydGljbGVXYXlVdGlsLmNsYW1wUmF0aW8odCk7XG4gICAgICAgIGNvbnN0IGxpbWl0ZWQgPSB0aGlzLmdldExpbWl0UG9pbnQodCk7XG4gICAgICAgIGlmIChsaW1pdGVkICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBsaW1pdGVkO1xuICAgICAgICBjb25zdCBpID0gUGFydGljbGVXYXlVdGlsLmdldFRJbmRleCh0LCB0aGlzLl9yYXRpb1RhYmxlKTtcbiAgICAgICAgY29uc3QgZmxvb3JQb2ludCA9IHRoaXMuX3BvaW50c1tpXTtcbiAgICAgICAgY29uc3QgY2VpbFBvaW50ID0gdGhpcy5fcG9pbnRzW2kgKyAxXTtcbiAgICAgICAgY29uc3QgcmF0aW9CYXNlID0gdGhpcy5fcmF0aW9UYWJsZVtpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQoZmxvb3JQb2ludCwgY2VpbFBvaW50LCAodCAtIHJhdGlvQmFzZSkgLyAodGhpcy5fcmF0aW9UYWJsZVtpICsgMV0gLSByYXRpb0Jhc2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0UG9pbnTjga7jgYbjgaHjgIHliLbpmZDjgavjgYvjgYvjgovlgKTjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0TGltaXRQb2ludCh0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcG9pbnRzIHx8IHRoaXMuX3BvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ID09PSBQYXJ0aWNsZS5NQVhfUkFUSU8pIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJ0aWNsZVdheVV0aWwuZ2V0UG9zaXRpb25XaXRoTWF4VCh0aGlzLl9wb2ludHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wb2ludHMubGVuZ3RoID09PSAxIHx8IHQgPT09IFBhcnRpY2xlLk1JTl9SQVRJTykge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi50aGlzLl9wb2ludHNbMF1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog57ea5YiG5LiK44Gu5Lit6ZaT54K55bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHBvczEg57ea5YiG44Gu5aeL54K5XG4gICAgICogQHBhcmFtIHBvczIg57ea5YiG44Gu57WC54K5XG4gICAgICogQHBhcmFtIHQg566X5Ye644GZ44KL5bqn5qiZ44Gu5L2N572u44CCMC4wKOWni+eCuSkgfiAxLjAo57WC54K5KeOBrumWk+OAglxuICAgICAqL1xuICAgIGdldENlbnRlclBvaW50KHBvczEsIHBvczIsIHQpIHtcbiAgICAgICAgY29uc3QgcnQgPSAxLjAgLSB0O1xuICAgICAgICBsZXQgcG9zID0gW3BvczFbMF0gKiBydCArIHBvczJbMF0gKiB0LCBwb3MxWzFdICogcnQgKyBwb3MyWzFdICogdF07XG4gICAgICAgIHN3aXRjaCAocG9zMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQmV6aWVyVXRpbC5nZXRQb2ludEZyb21Db21tYW5kKHQsIHBvczEsIHBvczIpO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHBvcy5wdXNoKHBvczFbMl0gKiBydCArIHBvczJbMl0gKiB0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBQYXJ0aWNsZVdheVV0aWwge1xuICAgIHN0YXRpYyBjbGFtcCh2YWwsIG1heCwgbWluKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIG1pbiksIG1heCk7XG4gICAgfVxuICAgIHN0YXRpYyBjbGFtcFJhdGlvKHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFtcCh2YWwsIFBhcnRpY2xlLk1BWF9SQVRJTywgUGFydGljbGUuTUlOX1JBVElPKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFBvc2l0aW9uV2l0aE1heFQocG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IG4gPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgcmVzdWx0ID0gcG9pbnRzW24gLSAxXTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgtMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsuLi5yZXN1bHRdO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VEluZGV4KHQsIHJhdGlvVGFibGUpIHtcbiAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICBjb25zdCBuID0gcmF0aW9UYWJsZS5sZW5ndGg7XG4gICAgICAgIGZvciAoaTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgaWYgKHJhdGlvVGFibGVbaV0gPj0gdClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudGVtaXR0ZXIzXCI7XG5leHBvcnQgdmFyIEdlbmVyYXRpb25Nb2RlO1xuKGZ1bmN0aW9uIChHZW5lcmF0aW9uTW9kZSkge1xuICAgIC8qKlxuICAgICAqIOODkeODvOODhuOCo+OCr+ODq+OCkumaj+aZgueUn+aIkOOBmeOCi1xuICAgICAqL1xuICAgIEdlbmVyYXRpb25Nb2RlW0dlbmVyYXRpb25Nb2RlW1wiU0VRVUVOVElBTFwiXSA9IDBdID0gXCJTRVFVRU5USUFMXCI7XG4gICAgLyoqXG4gICAgICog57WC56uv44Gr44Gf44Gp44KK552A44GE44Gf44OR44O844OG44Kj44Kv44Or44KS5be744GN5oi744GX44Gm5YaN5Yip55So44GZ44KLXG4gICAgICovXG4gICAgR2VuZXJhdGlvbk1vZGVbR2VuZXJhdGlvbk1vZGVbXCJMT09QXCJdID0gMV0gPSBcIkxPT1BcIjtcbn0pKEdlbmVyYXRpb25Nb2RlIHx8IChHZW5lcmF0aW9uTW9kZSA9IHt9KSk7XG5leHBvcnQgdmFyIEdlbmVyYXRpb25Nb2RlRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChHZW5lcmF0aW9uTW9kZUV2ZW50VHlwZSkge1xuICAgIEdlbmVyYXRpb25Nb2RlRXZlbnRUeXBlW1wiY2hhbmdlXCJdID0gXCJHZW5lcmF0aW9uTW9kZUV2ZW50VHlwZV9DaGFuZ2VcIjtcbn0pKEdlbmVyYXRpb25Nb2RlRXZlbnRUeXBlIHx8IChHZW5lcmF0aW9uTW9kZUV2ZW50VHlwZSA9IHt9KSk7XG5leHBvcnQgY2xhc3MgR2VuZXJhdGlvbk1vZGVNYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBnZXQgbW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGU7XG4gICAgfVxuICAgIHNldCBtb2RlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fbW9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fbW9kZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXQoR2VuZXJhdGlvbk1vZGVFdmVudFR5cGUuY2hhbmdlLCB0aGlzLl9tb2RlKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX21vZGUgPSBHZW5lcmF0aW9uTW9kZS5TRVFVRU5USUFMO1xuICAgIH1cbn1cbiIsImV4cG9ydCB2YXIgV2F5U2VsZWN0VHlwZTtcbihmdW5jdGlvbiAoV2F5U2VsZWN0VHlwZSkge1xuICAgIFdheVNlbGVjdFR5cGVbV2F5U2VsZWN0VHlwZVtcIlJhbmRvbVwiXSA9IDBdID0gXCJSYW5kb21cIjtcbiAgICBXYXlTZWxlY3RUeXBlW1dheVNlbGVjdFR5cGVbXCJTZXF1ZW50aWFsXCJdID0gMV0gPSBcIlNlcXVlbnRpYWxcIjtcbn0pKFdheVNlbGVjdFR5cGUgfHwgKFdheVNlbGVjdFR5cGUgPSB7fSkpO1xuLyoqXG4gKiDjgZPjga7jgq/jg6njgrnjga/jgIFQYXJ0aWNsZUdlbmVyYXRvcuOBq+ioreWumuOBleOCjOOBn+ikh+aVsOOBrue1jOi3r+OCkueuoeeQhuOBmeOCi+OBn+OCgeOBruOCguOBruOBp+OBmeOAglxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlwbGVQYXJ0aWNsZVdheXMge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbikge1xuICAgICAgICB0aGlzLndheVNlbGVjdGlvbkNvdW50ID0gMDtcbiAgICAgICAgTXVsdGlwbGVQYXJ0aWNsZVdheXNPcHRpb24uaW5pdE9wdGlvbihvcHRpb24pO1xuICAgICAgICB0aGlzLndheXMgPSBvcHRpb24ud2F5cztcbiAgICAgICAgdGhpcy53YXlTZWxlY3RUeXBlID0gb3B0aW9uLnR5cGU7XG4gICAgfVxuICAgIGNvdW50VXAoKSB7XG4gICAgICAgIHRoaXMud2F5U2VsZWN0aW9uQ291bnQgPSAodGhpcy53YXlTZWxlY3Rpb25Db3VudCArIDEpICUgdGhpcy53YXlzLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0UGFydGljbGVXYXkoKSB7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgc3dpdGNoICh0aGlzLndheVNlbGVjdFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgV2F5U2VsZWN0VHlwZS5TZXF1ZW50aWFsOlxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy53YXlTZWxlY3Rpb25Db3VudDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2F5U2VsZWN0VHlwZS5SYW5kb206XG4gICAgICAgICAgICAgICAgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLndheXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy53YXlzW2luZGV4XTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTXVsdGlwbGVQYXJ0aWNsZVdheXNPcHRpb24ge1xuICAgIHN0YXRpYyBpbml0T3B0aW9uKG9wdGlvbikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBvcHRpb24gIT09IG51bGwgJiYgb3B0aW9uICE9PSB2b2lkIDAgPyBvcHRpb24gOiAob3B0aW9uID0ge30pO1xuICAgICAgICAoX2EgPSBvcHRpb24ud2F5cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKG9wdGlvbi53YXlzID0gW10pO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9uLndheXMpKSB7XG4gICAgICAgICAgICBvcHRpb24ud2F5cyA9IFtvcHRpb24ud2F5c107XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gb3B0aW9uLnR5cGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChvcHRpb24udHlwZSA9IFdheVNlbGVjdFR5cGUuU2VxdWVudGlhbCk7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxufVxuIiwiLyoqXG4gKiBQYXJ0aWNsZUdlbmVyYXRvcuOBp+WIqeeUqOOBmeOCi+WQhOeoruOBruWApOOCkueul+WHuuOBmeOCi+ODmOODq+ODkeODvOOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgUGFydGljbGVHZW5lcmF0b3JVdGlsaXR5IHtcbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vjga7nlJ/miJDjgqTjg7Pjgr/jg7zjg5Djg6vjgajntYzot6/kuIrjga7mlbDjgYvjgonjgIHnp7vli5XpgJ/luqbjgpLnrpflh7rjgZnjgotcbiAgICAgKiBAcGFyYW0gaW50ZXJ2YWxcbiAgICAgKiBAcGFyYW0gcGFydGljbGVOdW1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U3BlZWQoaW50ZXJ2YWwsIHBhcnRpY2xlTnVtKSB7XG4gICAgICAgIHJldHVybiAoMS4wIC8gKGludGVydmFsICogcGFydGljbGVOdW0pKSAqIDEwMDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODkeODvOODhuOCo+OCr+ODq+OBruenu+WLlemAn+W6puOBqOe1jOi3r+S4iuOBruaVsOOBi+OCieOAgeeUn+aIkOOCpOODs+OCv+ODvOODkOODq+OCkueul+WHuuOBmeOCi1xuICAgICAqIEBwYXJhbSBzcGVlZFxuICAgICAqIEBwYXJhbSBwYXJ0aWNsZU51bVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRJbnRlcnZhbChzcGVlZCwgcGFydGljbGVOdW0pIHtcbiAgICAgICAgcmV0dXJuICgxLjAgLyBzcGVlZCAvIHBhcnRpY2xlTnVtKSAqIDEwMDA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2VuZXJhdGlvbk1vZGUgfSBmcm9tIFwiLi9HZW5lcmF0aW9uTW9kZU1hbmFnZXJcIjtcbmltcG9ydCB7IFBhcnRpY2xlR2VuZXJhdG9yVXRpbGl0eSB9IGZyb20gXCIuL1BhcnRpY2xlR2VuZXJhdG9yVXRpbGl0eVwiO1xuZXhwb3J0IGNsYXNzIFBhcnRpY2xlQW5pbWF0b3Ige1xuICAgIGdldCBnZW5lcmF0aW9uSW50ZXJ2YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmF0aW9uSW50ZXJ2YWw7XG4gICAgfVxuICAgIHNldCBnZW5lcmF0aW9uSW50ZXJ2YWwodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2dlbmVyYXRpb25JbnRlcnZhbCA9PT0gdmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2dlbmVyYXRpb25JbnRlcnZhbCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fbW9kZU1hbmFnZXIubW9kZSA9PT0gR2VuZXJhdGlvbk1vZGUuTE9PUCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUGFydGljbGVHZW5lcmF0b3IgOiDjg6vjg7zjg5fmjIflrprkuK3jgavjg5Hjg7zjg4bjgqPjgq/jg6vnlJ/miJDplpPpmpTjgpLlho3oqK3lrprjgZfjgabjgoLlj43mmKDjgZXjgozjgb7jgZvjgpPjgILoqK3lrprjgpLlj43mmKDjgZnjgovjgZ/jgoHjgavjg5Hjg7zjg4bjgqPjgq/jg6vjgpLliYrpmaTjgZfjgablho3nlJ/miJDjgZfjgabjgY/jgaDjgZXjgYTjgIJcIik7XG4gICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGVhc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lYXNlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihtb2RlTWFuYWdlciwgcGFydGljbGVDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGlvbkludGVydmFsID0gMzAwO1xuICAgICAgICB0aGlzLnNwZWVkUGVyU2VjID0gMC4wNztcbiAgICAgICAgdGhpcy5fcGFydGljbGVDb250YWluZXIgPSBwYXJ0aWNsZUNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5fbW9kZU1hbmFnZXIgPSBtb2RlTWFuYWdlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog55Sf5oiQ44Kk44Oz44K/44O844OQ44Or44Go57WM6Lev5LiK44Gu44OR44O844OG44Kj44Kv44Or5pWw44GL44KJ56e75YuV44K544OU44O844OJ44KS566X5Ye644GX6Kit5a6a44GZ44KL44CCXG4gICAgICogbG9vcOaZguOBq+egtOe2u+OBl+OBquOBhOWApOOBjOW+l+OCieOCjOOCi+OAglxuICAgICAqIEBwYXJhbSBpbnRlcnZhbFxuICAgICAqIEBwYXJhbSBwYXJ0aWNsZU51bVxuICAgICAqL1xuICAgIHNldFNwZWVkKGludGVydmFsLCBwYXJ0aWNsZU51bSkge1xuICAgICAgICB0aGlzLl9nZW5lcmF0aW9uSW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICAgICAgdGhpcy5zcGVlZFBlclNlYyA9IFBhcnRpY2xlR2VuZXJhdG9yVXRpbGl0eS5nZXRTcGVlZChpbnRlcnZhbCwgcGFydGljbGVOdW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDnp7vli5Xjgrnjg5Tjg7zjg4njgajntYzot6/kuIrjga7jg5Hjg7zjg4bjgqPjgq/jg6vmlbDjgYvjgonnlJ/miJDjgqTjg7Pjgr/jg7zjg5Djg6vjgpLnrpflh7rjgZfoqK3lrprjgZnjgovjgIJcbiAgICAgKiBsb29w5pmC44Gr56C057a744GX44Gq44GE5YCk44GM5b6X44KJ44KM44KL44CCXG4gICAgICogQHBhcmFtIHNwZWVkXG4gICAgICogQHBhcmFtIHBhcnRpY2xlTnVtXG4gICAgICovXG4gICAgc2V0R2VuZXJhdGlvbkludGVydmFsKHNwZWVkLCBwYXJ0aWNsZU51bSkge1xuICAgICAgICB0aGlzLnNwZWVkUGVyU2VjID0gc3BlZWQ7XG4gICAgICAgIHRoaXMuX2dlbmVyYXRpb25JbnRlcnZhbCA9IFBhcnRpY2xlR2VuZXJhdG9yVXRpbGl0eS5nZXRJbnRlcnZhbChzcGVlZCwgcGFydGljbGVOdW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vjga7kvY3nva7jgpLntYzpgY7mmYLplpPliIbnp7vli5XjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZGVsdGEg5YmN5Zue44Ki44OL44Oh44O844K344On44Oz44GM5a6f6KGM44GV44KM44Gm44GL44KJ44Gu57WM6YGO5pmC6ZaTIOWNmOS9jW1zXG4gICAgICovXG4gICAgbW92ZShkZWx0YSkge1xuICAgICAgICBjb25zdCBtb3ZlbWVudCA9IChkZWx0YSAvIDEwMDApICogdGhpcy5zcGVlZFBlclNlYztcbiAgICAgICAgdGhpcy5fcGFydGljbGVDb250YWluZXIubW92ZShtb3ZlbWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWQhOODkeODvOODhuOCo+OCr+ODq+OBrkVhc2XplqLmlbDjgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZWFzZSDjgqTjg7zjgrjjg7PjgrDplqLmlbDjgIJcbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGUg54++5a2Y44GZ44KL44OR44O844OG44Kj44Kv44Or44GuRWFzZemWouaVsOOCkuS4iuabuOOBjeOBmeOCi+OBi+WQpuOBi+OAguimj+WumuWApOOBr3RydWXjgIJcbiAgICAgKi9cbiAgICB1cGRhdGVFYXNlKGVhc2UsIG92ZXJyaWRlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9lYXNlID0gZWFzZTtcbiAgICAgICAgaWYgKCFvdmVycmlkZSAmJiB0aGlzLl9tb2RlTWFuYWdlci5tb2RlID09PSBHZW5lcmF0aW9uTW9kZS5MT09QKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQYXJ0aWNsZUdlbmVyYXRvciA6IOODq+ODvOODl+aMh+WumuS4reOBq0Vhc2XplqLmlbDjgpLlho3oqK3lrprjgZnjgovjgajjgIHml6LlrZjjga7jg5Hjg7zjg4bjgqPjgq/jg6vjga5FYXNl6Zai5pWw44Gv5bi444Gr5LiK5pu444GN44GV44KM44G+44GZ44CCXCIpO1xuICAgICAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdmVycmlkZSB8fCB0aGlzLl9tb2RlTWFuYWdlci5tb2RlID09PSBHZW5lcmF0aW9uTW9kZS5MT09QKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJ0aWNsZUNvbnRhaW5lci5vdmVycmlkZUVhc2UoZWFzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHZW5lcmF0aW9uTW9kZSwgR2VuZXJhdGlvbk1vZGVFdmVudFR5cGUsIH0gZnJvbSBcIi4vR2VuZXJhdGlvbk1vZGVNYW5hZ2VyXCI7XG4vKipcbiAqIOikh+aVsOOBruODkeODvOODhuOCo+OCr+ODq+OCkuagvOe0jeOAgeenu+WLleOAgeeuoeeQhuOBmeOCi+OBn+OCgeOBruOCr+ODqeOCueOBp+OBmeOAglxuICpcbiAqIOS4u+OBq1BhcnRpY2xlR2VuZXJhdG9y44Gn55Sf5oiQ44GV44KM44Gf44OR44O844OG44Kj44Kv44Or44KS566h55CG44GX44G+44GZ44CCXG4gKiBAc2VlIHtAbGluayBQYXJ0aWNsZUdlbmVyYXRvcn1cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRpY2xlQ29udGFpbmVyIHtcbiAgICBnZXQgcGFydGljbGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFydGljbGVzO1xuICAgIH1cbiAgICBnZXQgdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgfVxuICAgIHNldCB2aXNpYmxlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcGFydGljbGVzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgIHAudmlzaWJsZSA9IHRoaXMuX3Zpc2libGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihtb2RlTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIG1vZGVNYW5hZ2VyLm9uKEdlbmVyYXRpb25Nb2RlRXZlbnRUeXBlLmNoYW5nZSwgKG1vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBHZW5lcmF0aW9uTW9kZS5MT09QKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODkeODvOODhuOCo+OCr+ODq+OCkuagvOe0jeOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwYXJ0aWNsZVxuICAgICAqL1xuICAgIGFkZChwYXJ0aWNsZSkge1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSk7XG4gICAgICAgIHBhcnRpY2xlLnZpc2libGUgPSB0aGlzLl92aXNpYmxlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDmoLzntI3jgZXjgozjgZ/jgZnjgbnjgabjga7jg5Hjg7zjg4bjgqPjgq/jg6vjgpLnp7vli5XjgZXjgZvjgovjgIJcbiAgICAgKiBAc2VlIHtAbGluayBQYXJ0aWNsZS5hZGR9XG4gICAgICogQHBhcmFtIHRcbiAgICAgKi9cbiAgICBtb3ZlKHQpIHtcbiAgICAgICAgdGhpcy5fcGFydGljbGVzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgIHAuYWRkKHQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5a+/5ZG95YiH44KM44Gu44OR44O844OG44Kj44Kv44Or44KS5LiA5ous44Gn5YmK6Zmk44GZ44KL44CCXG4gICAgICovXG4gICAgcmVtb3ZlQ29tcGxldGVkUGFydGljbGVzKCkge1xuICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5fcGFydGljbGVzXG4gICAgICAgICAgICAuZmlsdGVyKChwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcC5yYXRpbyA+PSAxLjA7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgcC5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMgPSB0aGlzLl9wYXJ0aWNsZXMuZmlsdGVyKChwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcC5yYXRpbyA8IDEuMDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaMh+WumuOBleOCjOOBn+ODkeODvOODhuOCo+OCr+ODq+OCkuWJiumZpOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwYXJ0aWNsZVxuICAgICAqL1xuICAgIHJlbW92ZShwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBpID0gdGhpcy5fcGFydGljbGVzLmluZGV4T2YocGFydGljbGUpO1xuICAgICAgICBjb25zdCBwb3BwZWQgPSB0aGlzLl9wYXJ0aWNsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICBwb3BwZWQuZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgICAgICB2YWwuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5qC857SN44GV44KM44Gf44GZ44G544Gm44Gu44OR44O844OG44Kj44Kv44Or44KS5YmK6Zmk44GZ44KL44CCXG4gICAgICovXG4gICAgcmVtb3ZlQWxsKCkge1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgcC5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog57WC56uv44Gr44Gf44Gp44KK552A44GE44Gf44OR44O844OG44Kj44Kv44Or44KS5aeL54K544Gr5be744GN5oi744GZ44CCXG4gICAgICovXG4gICAgcm9sbHVwUGFydGljbGVzKCkge1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgcC51cGRhdGUocC5yYXRpbyAlIDEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb3ZlcnJpZGVFYXNlKGVhc2UpIHtcbiAgICAgICAgdGhpcy5fcGFydGljbGVzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgIHAuZWFzZSA9IGVhc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdlbmVyYXRpb25Nb2RlIH0gZnJvbSBcIi4vR2VuZXJhdGlvbk1vZGVNYW5hZ2VyXCI7XG4vKipcbiAqIOODkeODvOODhuOCo+OCr+ODq+aWsOimj+eUn+aIkOOBruODkOODq+ODlumWi+mWieOCkuihjOOBhuOCr+ODqeOCuVxuICogQHNlZSB7QGxpbmsgUGFydGljbGVHZW5lcmF0b3J9XG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZVZhbHZlIHtcbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihtb2RlTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9pc09wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLl9tb2RlTWFuYWdlciA9IG1vZGVNYW5hZ2VyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vnlJ/miJDjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICBpZiAodGhpcy5faXNPcGVuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc09wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLndhcm5VcGRhdGVWYWx2ZU1vZGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OR44O844OG44Kj44Kv44Or55Sf5oiQ44KS5YGc5q2i44GZ44KL44CCXG4gICAgICog44Ki44OL44Oh44O844K344On44Oz44Gv57aa6KGM44GV44KM44KL44CCXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNPcGVuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YXJuVXBkYXRlVmFsdmVNb2RlKCk7XG4gICAgfVxuICAgIHdhcm5VcGRhdGVWYWx2ZU1vZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlTWFuYWdlci5tb2RlICE9PSBHZW5lcmF0aW9uTW9kZS5MT09QKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJQYXJ0aWNsZUdlbmVyYXRvciA6IOODq+ODvOODl+aMh+WumuS4reOBq+ODkOODq+ODlumWi+mWieaTjeS9nOOCkuihjOOBhOOBvuOBl+OBn+OAguOBk+OBruaTjeS9nOOBr+ODq+ODvOODl+aMh+WumuS4reOBq+OBr+WPjeaYoOOBleOCjOOBvuOBm+OCk+OAglwiKTtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJBRlRpY2tlciwgUkFGVGlja2VyRXZlbnRUeXBlLCB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IFBhcnRpY2xlIH0gZnJvbSBcIi4uL1BhcnRpY2xlXCI7XG5pbXBvcnQgeyBHZW5lcmF0aW9uTW9kZSwgR2VuZXJhdGlvbk1vZGVFdmVudFR5cGUsIEdlbmVyYXRpb25Nb2RlTWFuYWdlciwgfSBmcm9tIFwiLi9HZW5lcmF0aW9uTW9kZU1hbmFnZXJcIjtcbmltcG9ydCB7IE11bHRpcGxlUGFydGljbGVXYXlzIH0gZnJvbSBcIi4vTXVsdGlwbGVQYXJ0aWNsZVdheXNcIjtcbmltcG9ydCB7IFBhcnRpY2xlQW5pbWF0b3IgfSBmcm9tIFwiLi9QYXJ0aWNsZUFuaW1hdG9yXCI7XG5pbXBvcnQgeyBQYXJ0aWNsZUNvbnRhaW5lciB9IGZyb20gXCIuL1BhcnRpY2xlQ29udGFpbmVyXCI7XG5pbXBvcnQgeyBQYXJ0aWNsZVZhbHZlIH0gZnJvbSBcIi4vUGFydGljbGVWYWx2ZVwiO1xuLyoqXG4gKiDkuIDlrprplpPpmpTjgafjg5Hjg7zjg4bjgqPjgq/jg6vjgpLnlJ/miJDjgZfjgIHjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgZXjgZvjgovjgq/jg6njgrnjgIJcbiAqIOODkeODvOODhuOCo+OCr+ODq+OCpOODs+OCueOCv+ODs+OCueOBrueUn+aIkOOBqOeuoeeQhuOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgUGFydGljbGVHZW5lcmF0b3Ige1xuICAgIGdldCBpc1BsYXlpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1BsYXlpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBwYXRoXG4gICAgICogQHBhcmFtIG9wdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhdGgsIG9wdGlvbikge1xuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWJjeWbnuODkeODvOODhuOCo+OCr+ODq+eUn+aIkOaZguOBi+OCieOBrue1jOmBjuaZgumWkyDljZjkvY1tc1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbGFwc2VkRnJvbUdlbmVyYXRlID0gMDtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICog44OR44O844OG44Kj44Kv44Or44KS44Ki44OL44Oh44O844K344On44Oz44GV44Gb44KL44CCXG4gICAgICAgICAqIEBwYXJhbSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFuaW1hdGUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5tb3ZlKGUuZGVsdGEpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZUNvbnRhaW5lci5yZW1vdmVDb21wbGV0ZWRQYXJ0aWNsZXMoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkUGFydGljbGUoZS5kZWx0YSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vjgpLjg6vjg7zjg5fjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgZXjgZvjgovjgIJcbiAgICAgICAgICogQHBhcmFtIGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubG9vcCA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJ0aWNsZUNvbnRhaW5lci5wYXJ0aWNsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUFsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5tb3ZlKGUuZGVsdGEpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZUNvbnRhaW5lci5yb2xsdXBQYXJ0aWNsZXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb2RlTWFuYWdlciA9IG5ldyBHZW5lcmF0aW9uTW9kZU1hbmFnZXIoKTtcbiAgICAgICAgdGhpcy5tdWx0aXBsZVdheXMgPSBuZXcgTXVsdGlwbGVQYXJ0aWNsZVdheXMoeyB3YXlzOiBwYXRoIH0pO1xuICAgICAgICB0aGlzLnBhcnRpY2xlQ29udGFpbmVyID0gbmV3IFBhcnRpY2xlQ29udGFpbmVyKHRoaXMubW9kZU1hbmFnZXIpO1xuICAgICAgICB0aGlzLnZhbHZlID0gbmV3IFBhcnRpY2xlVmFsdmUodGhpcy5tb2RlTWFuYWdlcik7XG4gICAgICAgIHRoaXMuYW5pbWF0b3IgPSBuZXcgUGFydGljbGVBbmltYXRvcih0aGlzLm1vZGVNYW5hZ2VyLCB0aGlzLnBhcnRpY2xlQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5tb2RlTWFuYWdlci5vbihHZW5lcmF0aW9uTW9kZUV2ZW50VHlwZS5jaGFuZ2UsICh2YWwpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9wdGlvbiA9IFBhcnRpY2xlR2VuZXJhdG9yT3B0aW9uLmluaXRPcHRpb24ob3B0aW9uKTtcbiAgICAgICAgdGhpcy5tb2RlTWFuYWdlci5tb2RlID0gb3B0aW9uLmdlbmVyYXRpb25Nb2RlO1xuICAgICAgICB0aGlzLmFuaW1hdG9yLnVwZGF0ZUVhc2Uob3B0aW9uLmVhc2UpO1xuICAgICAgICB0aGlzLnByb2JhYmlsaXR5ID0gb3B0aW9uLnByb2JhYmlsaXR5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKi9cbiAgICBwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5faXNQbGF5aW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZU1hbmFnZXIubW9kZSkge1xuICAgICAgICAgICAgY2FzZSBHZW5lcmF0aW9uTW9kZS5MT09QOlxuICAgICAgICAgICAgICAgIFJBRlRpY2tlci5hZGRMaXN0ZW5lcihSQUZUaWNrZXJFdmVudFR5cGUudGljaywgdGhpcy5sb29wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2VuZXJhdGlvbk1vZGUuU0VRVUVOVElBTDpcbiAgICAgICAgICAgICAgICBSQUZUaWNrZXIuYWRkTGlzdGVuZXIoUkFGVGlja2VyRXZlbnRUeXBlLnRpY2ssIHRoaXMuYW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44OR44O844OG44Kj44Kv44Or44Ki44OL44Oh44O844K344On44Oz44KS5YGc5q2i44GZ44KL44CCXG4gICAgICovXG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1BsYXlpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICBSQUZUaWNrZXIucmVtb3ZlTGlzdGVuZXIoUkFGVGlja2VyRXZlbnRUeXBlLnRpY2ssIHRoaXMubG9vcCk7XG4gICAgICAgIFJBRlRpY2tlci5yZW1vdmVMaXN0ZW5lcihSQUZUaWNrZXJFdmVudFR5cGUudGljaywgdGhpcy5hbmltYXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Ki44OL44Oh44O844K344On44Oz44Gr5Ly044GE44CB5paw6KaP44OR44O844OG44Kj44Kv44Or44KS6L+95Yqg44GZ44KL44CCXG4gICAgICogQHBhcmFtIGRlbHRhXG4gICAgICovXG4gICAgYWRkUGFydGljbGUoZGVsdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHZlLmlzT3BlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYW5pbSA9IHRoaXMuYW5pbWF0b3I7XG4gICAgICAgIHRoaXMuZWxhcHNlZEZyb21HZW5lcmF0ZSArPSBkZWx0YTtcbiAgICAgICAgd2hpbGUgKHRoaXMuZWxhcHNlZEZyb21HZW5lcmF0ZSA+IGFuaW0uZ2VuZXJhdGlvbkludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsYXBzZWRGcm9tR2VuZXJhdGUgLT0gYW5pbS5nZW5lcmF0aW9uSW50ZXJ2YWw7XG4gICAgICAgICAgICBjb25zdCBtb3ZlID0gKHRoaXMuZWxhcHNlZEZyb21HZW5lcmF0ZSAqIGFuaW0uc3BlZWRQZXJTZWMpIC8gMTAwMDtcbiAgICAgICAgICAgIC8v44GZ44Gn44Gr5a+/5ZG95YiH44KM44Gu44OR44O844OG44Kj44Kv44Or44Gv55Sf5oiQ44KS44K544Kt44OD44OX44CCXG4gICAgICAgICAgICBpZiAobW92ZSA+IFBhcnRpY2xlLk1BWF9SQVRJTykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLmdlbmVyYXRlKCk7XG4gICAgICAgICAgICBwYXJ0aWNsZSA9PT0gbnVsbCB8fCBwYXJ0aWNsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFydGljbGUuYWRkKG1vdmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODkeODvOODhuOCo+OCr+ODq+OCkjHjgaTov73liqDjgZnjgovjgIJcbiAgICAgKi9cbiAgICBnZW5lcmF0ZSgpIHtcbiAgICAgICAgdGhpcy5tdWx0aXBsZVdheXMuY291bnRVcCgpO1xuICAgICAgICAvL+eZuueUn+eiuueOh+OBq+W/nOOBmOOBpueUn+aIkOOBruWPr+WQpuOCkuWIpOWumuOBmeOCi+OAglxuICAgICAgICBpZiAodGhpcy5wcm9iYWJpbGl0eSAhPT0gMS4wKSB7XG4gICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IHRoaXMucHJvYmFiaWxpdHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMubXVsdGlwbGVXYXlzLmdldFBhcnRpY2xlV2F5KCk7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5nZW5lcmF0ZVBhcnRpY2xlKHBhdGgpO1xuICAgICAgICBpZiAodGhpcy5hbmltYXRvci5lYXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmVhc2UgPSB0aGlzLmFuaW1hdG9yLmVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJ0aWNsZUNvbnRhaW5lci5hZGQocGFydGljbGUpO1xuICAgICAgICByZXR1cm4gcGFydGljbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODkeODvOODhuOCo+OCr+ODq+OCkueUn+aIkOOBmeOCi+OAglxuICAgICAqIGdlbmVyYXRl6Zai5pWw44Gu5YaF6YOo5Yem55CG44CCXG4gICAgICogQHBhcmFtIHBhdGhcbiAgICAgKi9cbiAgICBnZW5lcmF0ZVBhcnRpY2xlKHBhdGgpIHtcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSBuZXcgUGFydGljbGUocGF0aCk7XG4gICAgICAgIC8vVE9ETyDjgZPjgZPjgafjgrPjg7Pjg4bjg4rjgavmjL/lhaXjgIJcbiAgICAgICAgcmV0dXJuIHBhcnRpY2xlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDntYzot6/kuIrjgavjg5Hjg7zjg4bjgqPjgq/jg6vjgpLmlbfjgY3oqbDjgoHjgovjgIJcbiAgICAgKi9cbiAgICBnZW5lcmF0ZUFsbCgpIHtcbiAgICAgICAgLy/jg5Hjg7zjg4bjgqPjgq/jg6vjga7mnIDlpKfnlJ/lrZjmnJ/plpMg5Y2Y5L2N44Of44Oq56eSXG4gICAgICAgIGxldCBsaWZlVGltZSA9IDEwMDAuMCAvIHRoaXMuYW5pbWF0b3Iuc3BlZWRQZXJTZWM7XG4gICAgICAgIHdoaWxlIChsaWZlVGltZSA+IDAuMCkge1xuICAgICAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLmdlbmVyYXRlKCk7XG4gICAgICAgICAgICBpZiAocGFydGljbGUpXG4gICAgICAgICAgICAgICAgcGFydGljbGUudXBkYXRlKChsaWZlVGltZSAvIDEwMDApICogdGhpcy5hbmltYXRvci5zcGVlZFBlclNlYyk7XG4gICAgICAgICAgICBsaWZlVGltZSAtPSB0aGlzLmFuaW1hdG9yLmdlbmVyYXRpb25JbnRlcnZhbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsYXBzZWRGcm9tR2VuZXJhdGUgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4bjgqPjgq/jg6vnlJ/miJDjga7lgZzmraLjgajjg5Hjg7zjg4bjgqPjgq/jg6vjga7noLTmo4TjgpLooYzjgYbjgIJcbiAgICAgKi9cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucGFydGljbGVDb250YWluZXIucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMucGFydGljbGVDb250YWluZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm11bHRpcGxlV2F5cyA9IG51bGw7XG4gICAgfVxufVxuLyoqXG4gKiDjg5Hjg7zjg4bjgqPjgq/jg6vnlJ/miJDmlrnms5XjgpLmjIflrprjgZnjgovjgqrjg5fjgrfjg6fjg7NcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRpY2xlR2VuZXJhdG9yT3B0aW9uIHtcbiAgICBzdGF0aWMgaW5pdE9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgb3B0aW9uICE9PSBudWxsICYmIG9wdGlvbiAhPT0gdm9pZCAwID8gb3B0aW9uIDogKG9wdGlvbiA9IHt9KTtcbiAgICAgICAgKF9hID0gb3B0aW9uLmdlbmVyYXRpb25Nb2RlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAob3B0aW9uLmdlbmVyYXRpb25Nb2RlID0gR2VuZXJhdGlvbk1vZGUuU0VRVUVOVElBTCk7XG4gICAgICAgIChfYiA9IG9wdGlvbi5wcm9iYWJpbGl0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKG9wdGlvbi5wcm9iYWJpbGl0eSA9IDEuMCk7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vUGFydGljbGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1BhcnRpY2xlV2F5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CZXppZXJVdGlsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0b3IvUGFydGljbGVHZW5lcmF0b3JcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRvci9NdWx0aXBsZVBhcnRpY2xlV2F5c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdG9yL1BhcnRpY2xlQ29udGFpbmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0b3IvR2VuZXJhdGlvbk1vZGVNYW5hZ2VyXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///137\n')},163:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Fz": () => (/* reexport */ RAFTicker),\n  "M9": () => (/* reexport */ RAFTickerEventType)\n});\n\n// UNUSED EXPORTS: RAFTickerEvent\n\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js\nvar eventemitter3 = __webpack_require__(34);\nvar eventemitter3_default = /*#__PURE__*/__webpack_require__.n(eventemitter3);\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/raf-ticker/esm/RAFTickerEvent.js\nvar RAFTickerEventType;\n(function (RAFTickerEventType) {\n    RAFTickerEventType["onBeforeTick"] = "onBeforeTick";\n    RAFTickerEventType["tick"] = "tick";\n    RAFTickerEventType["onAfterTick"] = "onAfterTick";\n})(RAFTickerEventType || (RAFTickerEventType = {}));\nclass RAFTickerEvent {\n    constructor(timestamp, delta) {\n        this.timestamp = timestamp;\n        this.delta = delta;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/raf-ticker/esm/RAFTicker.js\nvar _a;\n\n\nclass RAFTicker {\n    static initialize() {\n        if (this._dispatcher == null) {\n            this._dispatcher = new (eventemitter3_default())();\n        }\n        this.start();\n    }\n    static reset() {\n        this._dispatcher.removeAllListeners();\n        this.stop();\n        this.start();\n    }\n    static start() {\n        if (!RAFTicker._id) {\n            this._lastUpdateTimestamp = undefined;\n            RAFTicker.onTick(performance.now());\n        }\n    }\n    static stop() {\n        cancelAnimationFrame(RAFTicker._id);\n        this._id = undefined;\n        this._lastUpdateTimestamp = undefined;\n    }\n    static addListener(type, listener) {\n        this._dispatcher.on(type, listener);\n    }\n    /**\n     *\n     * @param type\n     * @param listener\n     */\n    static hasListener(type, listener) {\n        const listeners = this._dispatcher.listeners(type);\n        return listeners.includes(listener);\n    }\n    /**\n     * Removes the specified listener\n     *\n     * @param type\n     * @param listener\n     */\n    static removeListener(type, listener) {\n        this._dispatcher.removeListener(type, listener);\n    }\n    /**\n     * イベントを発効する。\n     * この関数はアプリケーションから利用することはなく、主に単体テストのために使用する。\n     *\n     * @param type\n     * @param event\n     */\n    static emit(type, event) {\n        this._dispatcher.emit(type, event);\n    }\n    static emitTickEvent(timestamp) {\n        if (RAFTicker._lastUpdateTimestamp == null) {\n            RAFTicker._lastUpdateTimestamp = timestamp;\n        }\n        const delta = timestamp - RAFTicker._lastUpdateTimestamp;\n        RAFTicker.emit(RAFTickerEventType.onBeforeTick, new RAFTickerEvent(timestamp, delta));\n        RAFTicker.emit(RAFTickerEventType.tick, new RAFTickerEvent(timestamp, delta));\n        RAFTicker.emit(RAFTickerEventType.onAfterTick, new RAFTickerEvent(timestamp, delta));\n        RAFTicker._lastUpdateTimestamp = timestamp;\n    }\n}\n_a = RAFTicker;\n/**\n * Alias for addListener\n *\n * @param type\n * @param listener\n */\nRAFTicker.on = RAFTicker.addListener;\n/**\n * Alias for addListener\n *\n * @deprecated use addListener or on\n * @param type\n * @param listener\n */\nRAFTicker.addEventListener = RAFTicker.addListener;\n/**\n * Alias for hasListener\n *\n * @deprecated use hasListener\n * @param type\n * @param listener\n */\nRAFTicker.hasEventListener = RAFTicker.hasListener;\n/**\n * Alias for removeListener\n *\n * @param type\n * @param listener\n */\nRAFTicker.off = RAFTicker.removeListener;\n/**\n * Alias for removeListener\n *\n * @deprecated use removeListener or off\n * @param type\n * @param listener\n */\nRAFTicker.removeEventListener = RAFTicker.removeListener;\nRAFTicker.onTick = (timestamp) => {\n    _a.emitTickEvent(timestamp);\n    RAFTicker._id = requestAnimationFrame(RAFTicker.onTick);\n};\nRAFTicker.initialize();\n\n;// CONCATENATED MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0Q7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNYQTtBQUN5QztBQUM2QjtBQUMvRDtBQUNQO0FBQ0E7QUFDQSxtQ0FBbUMseUJBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0JBQStCLE1BQU0sY0FBYztBQUMxRSx1QkFBdUIsdUJBQXVCLE1BQU0sY0FBYztBQUNsRSx1QkFBdUIsOEJBQThCLE1BQU0sY0FBYztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvRzRCO0FBQ0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL2NhbnZhcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9AbWFzYXRvbWFraW5vL3JhZi10aWNrZXIvZXNtL1JBRlRpY2tlckV2ZW50LmpzP2E3NWQiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jYW52YXMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvQG1hc2F0b21ha2luby9yYWYtdGlja2VyL2VzbS9SQUZUaWNrZXIuanM/OGQzNCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL2NhbnZhcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9AbWFzYXRvbWFraW5vL3JhZi10aWNrZXIvZXNtL2luZGV4LmpzPzhkYjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBSQUZUaWNrZXJFdmVudFR5cGU7XG4oZnVuY3Rpb24gKFJBRlRpY2tlckV2ZW50VHlwZSkge1xuICAgIFJBRlRpY2tlckV2ZW50VHlwZVtcIm9uQmVmb3JlVGlja1wiXSA9IFwib25CZWZvcmVUaWNrXCI7XG4gICAgUkFGVGlja2VyRXZlbnRUeXBlW1widGlja1wiXSA9IFwidGlja1wiO1xuICAgIFJBRlRpY2tlckV2ZW50VHlwZVtcIm9uQWZ0ZXJUaWNrXCJdID0gXCJvbkFmdGVyVGlja1wiO1xufSkoUkFGVGlja2VyRXZlbnRUeXBlIHx8IChSQUZUaWNrZXJFdmVudFR5cGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFJBRlRpY2tlckV2ZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0aW1lc3RhbXAsIGRlbHRhKSB7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgICB0aGlzLmRlbHRhID0gZGVsdGE7XG4gICAgfVxufVxuIiwidmFyIF9hO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRlbWl0dGVyM1wiO1xuaW1wb3J0IHsgUkFGVGlja2VyRXZlbnQsIFJBRlRpY2tlckV2ZW50VHlwZSB9IGZyb20gXCIuL1JBRlRpY2tlckV2ZW50XCI7XG5leHBvcnQgY2xhc3MgUkFGVGlja2VyIHtcbiAgICBzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3BhdGNoZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0YXRpYyByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RhdGljIHN0YXJ0KCkge1xuICAgICAgICBpZiAoIVJBRlRpY2tlci5faWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RVcGRhdGVUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBSQUZUaWNrZXIub25UaWNrKHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgc3RvcCgpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoUkFGVGlja2VyLl9pZCk7XG4gICAgICAgIHRoaXMuX2lkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9sYXN0VXBkYXRlVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzdGF0aWMgYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hlci5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fZGlzcGF0Y2hlci5saXN0ZW5lcnModHlwZSk7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcnMuaW5jbHVkZXMobGlzdGVuZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICovXG4gICAgc3RhdGljIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoZXIucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgqTjg5njg7Pjg4jjgpLnmbrlirnjgZnjgovjgIJcbiAgICAgKiDjgZPjga7plqLmlbDjga/jgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgYvjgonliKnnlKjjgZnjgovjgZPjgajjga/jgarjgY/jgIHkuLvjgavljZjkvZPjg4bjgrnjg4jjga7jgZ/jgoHjgavkvb/nlKjjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgc3RhdGljIGVtaXQodHlwZSwgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hlci5lbWl0KHR5cGUsIGV2ZW50KTtcbiAgICB9XG4gICAgc3RhdGljIGVtaXRUaWNrRXZlbnQodGltZXN0YW1wKSB7XG4gICAgICAgIGlmIChSQUZUaWNrZXIuX2xhc3RVcGRhdGVUaW1lc3RhbXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgUkFGVGlja2VyLl9sYXN0VXBkYXRlVGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGltZXN0YW1wIC0gUkFGVGlja2VyLl9sYXN0VXBkYXRlVGltZXN0YW1wO1xuICAgICAgICBSQUZUaWNrZXIuZW1pdChSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCBuZXcgUkFGVGlja2VyRXZlbnQodGltZXN0YW1wLCBkZWx0YSkpO1xuICAgICAgICBSQUZUaWNrZXIuZW1pdChSQUZUaWNrZXJFdmVudFR5cGUudGljaywgbmV3IFJBRlRpY2tlckV2ZW50KHRpbWVzdGFtcCwgZGVsdGEpKTtcbiAgICAgICAgUkFGVGlja2VyLmVtaXQoUkFGVGlja2VyRXZlbnRUeXBlLm9uQWZ0ZXJUaWNrLCBuZXcgUkFGVGlja2VyRXZlbnQodGltZXN0YW1wLCBkZWx0YSkpO1xuICAgICAgICBSQUZUaWNrZXIuX2xhc3RVcGRhdGVUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxufVxuX2EgPSBSQUZUaWNrZXI7XG4vKipcbiAqIEFsaWFzIGZvciBhZGRMaXN0ZW5lclxuICpcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gbGlzdGVuZXJcbiAqL1xuUkFGVGlja2VyLm9uID0gUkFGVGlja2VyLmFkZExpc3RlbmVyO1xuLyoqXG4gKiBBbGlhcyBmb3IgYWRkTGlzdGVuZXJcbiAqXG4gKiBAZGVwcmVjYXRlZCB1c2UgYWRkTGlzdGVuZXIgb3Igb25cbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gbGlzdGVuZXJcbiAqL1xuUkFGVGlja2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBSQUZUaWNrZXIuYWRkTGlzdGVuZXI7XG4vKipcbiAqIEFsaWFzIGZvciBoYXNMaXN0ZW5lclxuICpcbiAqIEBkZXByZWNhdGVkIHVzZSBoYXNMaXN0ZW5lclxuICogQHBhcmFtIHR5cGVcbiAqIEBwYXJhbSBsaXN0ZW5lclxuICovXG5SQUZUaWNrZXIuaGFzRXZlbnRMaXN0ZW5lciA9IFJBRlRpY2tlci5oYXNMaXN0ZW5lcjtcbi8qKlxuICogQWxpYXMgZm9yIHJlbW92ZUxpc3RlbmVyXG4gKlxuICogQHBhcmFtIHR5cGVcbiAqIEBwYXJhbSBsaXN0ZW5lclxuICovXG5SQUZUaWNrZXIub2ZmID0gUkFGVGlja2VyLnJlbW92ZUxpc3RlbmVyO1xuLyoqXG4gKiBBbGlhcyBmb3IgcmVtb3ZlTGlzdGVuZXJcbiAqXG4gKiBAZGVwcmVjYXRlZCB1c2UgcmVtb3ZlTGlzdGVuZXIgb3Igb2ZmXG4gKiBAcGFyYW0gdHlwZVxuICogQHBhcmFtIGxpc3RlbmVyXG4gKi9cblJBRlRpY2tlci5yZW1vdmVFdmVudExpc3RlbmVyID0gUkFGVGlja2VyLnJlbW92ZUxpc3RlbmVyO1xuUkFGVGlja2VyLm9uVGljayA9ICh0aW1lc3RhbXApID0+IHtcbiAgICBfYS5lbWl0VGlja0V2ZW50KHRpbWVzdGFtcCk7XG4gICAgUkFGVGlja2VyLl9pZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShSQUZUaWNrZXIub25UaWNrKTtcbn07XG5SQUZUaWNrZXIuaW5pdGlhbGl6ZSgpO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vUkFGVGlja2VyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SQUZUaWNrZXJFdmVudFwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///163\n')},471:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"oY\": () => (/* binding */ Easing)\n/* harmony export */ });\n/* unused harmony exports Group, Interpolation, Sequence, Tween, VERSION, add, getAll, nextId, now, remove, removeAll, update */\n/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = {\n    Linear: {\n        None: function (amount) {\n            return amount;\n        },\n    },\n    Quadratic: {\n        In: function (amount) {\n            return amount * amount;\n        },\n        Out: function (amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        },\n    },\n    Cubic: {\n        In: function (amount) {\n            return amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        },\n    },\n    Quartic: {\n        In: function (amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        },\n    },\n    Quintic: {\n        In: function (amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        },\n    },\n    Sinusoidal: {\n        In: function (amount) {\n            return 1 - Math.cos((amount * Math.PI) / 2);\n        },\n        Out: function (amount) {\n            return Math.sin((amount * Math.PI) / 2);\n        },\n        InOut: function (amount) {\n            return 0.5 * (1 - Math.cos(Math.PI * amount));\n        },\n    },\n    Exponential: {\n        In: function (amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function (amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        },\n    },\n    Circular: {\n        In: function (amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function (amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        },\n    },\n    Elastic: {\n        In: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        },\n    },\n    Back: {\n        In: function (amount) {\n            var s = 1.70158;\n            return amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function (amount) {\n            var s = 1.70158;\n            return --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function (amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        },\n    },\n    Bounce: {\n        In: function (amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function (amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            }\n            else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            }\n            else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            }\n            else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function (amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        },\n    },\n};\n\nvar now;\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n// eslint-disable-next-line\n// @ts-ignore\nif (typeof self === 'undefined' && typeof process !== 'undefined' && process.hrtime) {\n    now = function () {\n        // eslint-disable-next-line\n        // @ts-ignore\n        var time = process.hrtime();\n        // Convert [seconds, nanoseconds] to milliseconds.\n        return time[0] * 1000 + time[1] / 1000000;\n    };\n}\n// In a browser, use self.performance.now if it is available.\nelse if (typeof self !== 'undefined' && self.performance !== undefined && self.performance.now !== undefined) {\n    // This must be bound, because directly assigning this function\n    // leads to an invocation exception in Chrome.\n    now = self.performance.now.bind(self.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n    now = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n    now = function () {\n        return new Date().getTime();\n    };\n}\nvar now$1 = now;\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */ (function () {\n    function Group() {\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n    }\n    Group.prototype.getAll = function () {\n        var _this = this;\n        return Object.keys(this._tweens).map(function (tweenId) {\n            return _this._tweens[tweenId];\n        });\n    };\n    Group.prototype.removeAll = function () {\n        this._tweens = {};\n    };\n    Group.prototype.add = function (tween) {\n        this._tweens[tween.getId()] = tween;\n        this._tweensAddedDuringUpdate[tween.getId()] = tween;\n    };\n    Group.prototype.remove = function (tween) {\n        delete this._tweens[tween.getId()];\n        delete this._tweensAddedDuringUpdate[tween.getId()];\n    };\n    Group.prototype.update = function (time, preserve) {\n        if (time === void 0) { time = now$1(); }\n        if (preserve === void 0) { preserve = false; }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0) {\n            return false;\n        }\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while (tweenIds.length > 0) {\n            this._tweensAddedDuringUpdate = {};\n            for (var i = 0; i < tweenIds.length; i++) {\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve) {\n                    delete this._tweens[tweenIds[i]];\n                }\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n        return true;\n    };\n    return Group;\n}());\n\n/**\n *\n */\nvar Interpolation = {\n    Linear: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function (v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for (var i = 0; i <= n; i++) {\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor((f = m * (1 + k)));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        }\n        else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function (p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function (n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: (function () {\n            var a = [1];\n            return function (n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for (var i = n; i > 1; i--) {\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        })(),\n        CatmullRom: function (p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        },\n    },\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */ (function () {\n    function Sequence() {\n    }\n    Sequence.nextId = function () {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}());\n\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */ (function () {\n    function Tween(_object, _group) {\n        if (_group === void 0) { _group = mainGroup; }\n        this._object = _object;\n        this._group = _group;\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._goToEnd = false;\n    }\n    Tween.prototype.getId = function () {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function () {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function () {\n        return this._isPaused;\n    };\n    Tween.prototype.to = function (properties, duration) {\n        // TODO? restore this, then update the 07_dynamic_to example to set fox\n        // tween's to on each update. That way the behavior is opt-in (there's\n        // currently no opt-out).\n        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]\n        this._valuesEnd = Object.create(properties);\n        if (duration !== undefined) {\n            this._duration = duration;\n        }\n        return this;\n    };\n    Tween.prototype.duration = function (d) {\n        this._duration = d;\n        return this;\n    };\n    Tween.prototype.start = function (time) {\n        if (this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for (var property in this._valuesStartRepeat) {\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time !== undefined ? (typeof time === 'string' ? now$1() + parseFloat(time) : time) : now$1();\n        this._startTime += this._delayTime;\n        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);\n        return this;\n    };\n    Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {\n        for (var property in _valuesEnd) {\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? 'array' : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === 'undefined' || propType === 'function') {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // handle an array of relative values\n                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));\n                // Create a local copy of the Array with the start value at the front\n                _valuesEnd[property] = [startValue].concat(endValues);\n            }\n            // handle the deepness of the values\n            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                // eslint-disable-next-line\n                for (var prop in startValue) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property][prop] = startValue[prop];\n                }\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);\n            }\n            else {\n                // Save the starting value, but only once.\n                if (typeof _valuesStart[property] === 'undefined') {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                }\n                else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function () {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function () {\n        this._goToEnd = true;\n        this.update(Infinity);\n        return this;\n    };\n    Tween.prototype.pause = function (time) {\n        if (time === void 0) { time = now$1(); }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        return this;\n    };\n    Tween.prototype.resume = function (time) {\n        if (time === void 0) { time = now$1(); }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function () {\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function (group) {\n        this._group = group;\n        return this;\n    };\n    Tween.prototype.delay = function (amount) {\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function (times) {\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function (amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function (yoyo) {\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function (easingFunction) {\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function (interpolationFunction) {\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    Tween.prototype.chain = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function (callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function (callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function (callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function (callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function (callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     */\n    Tween.prototype.update = function (time, autoStart) {\n        if (time === void 0) { time = now$1(); }\n        if (autoStart === void 0) { autoStart = true; }\n        if (this._isPaused)\n            return true;\n        var property;\n        var elapsed;\n        var endTime = this._startTime + this._duration;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (time > endTime)\n                return false;\n            if (autoStart)\n                this.start(time);\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        elapsed = (time - this._startTime) / this._duration;\n        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (elapsed === 1) {\n            if (this._repeat > 0) {\n                if (isFinite(this._repeat)) {\n                    this._repeat--;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for (property in this._valuesStartRepeat) {\n                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n                        this._valuesStartRepeat[property] =\n                            // eslint-disable-next-line\n                            // @ts-ignore FIXME?\n                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                if (this._repeatDelayTime !== undefined) {\n                    this._startTime = time + this._repeatDelayTime;\n                }\n                else {\n                    this._startTime = time + this._delayTime;\n                }\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                return true;\n            }\n            else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n        for (var property in _valuesEnd) {\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            }\n            else if (typeof end === 'object' && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            }\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === 'number') {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function (start, end) {\n        if (typeof end !== 'string') {\n            return end;\n        }\n        if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n            return start + parseFloat(end);\n        }\n        else {\n            return parseFloat(end);\n        }\n    };\n    Tween.prototype._swapEndStartRepeatValues = function (property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === 'string') {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        }\n        else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    return Tween;\n}());\n\nvar VERSION = '18.6.4';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now$1,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    getAll: getAll,\n    removeAll: removeAll,\n    add: add,\n    remove: remove,\n    update: update,\n};\n\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (exports)));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///471\n")},34:module=>{eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n")},899:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ZP\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony exports BooleanController, ColorController, Controller, FunctionController, GUI, NumberController, OptionController, StringController */\n/**\n * lil-gui\n * https://lil-gui.georgealways.com\n * @version 0.18.0\n * @author George Michael Brower\n * @license MIT\n */\n\n/**\n * Base class for all controllers.\n */\nclass Controller {\n\n\tconstructor( parent, object, property, className, widgetTag = 'div' ) {\n\n\t\t/**\n\t\t * The GUI that contains this controller.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The object this controller will modify.\n\t\t * @type {object}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The name of the property to control.\n\t\t * @type {string}\n\t\t */\n\t\tthis.property = property;\n\n\t\t/**\n\t\t * Used to determine if the controller is disabled.\n\t\t * Use `controller.disable( true|false )` to modify this value\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._disabled = false;\n\n\t\t/**\n\t\t * Used to determine if the Controller is hidden.\n\t\t * Use `controller.show()` or `controller.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._hidden = false;\n\n\t\t/**\n\t\t * The value of `object[ property ]` when the controller was created.\n\t\t * @type {any}\n\t\t */\n\t\tthis.initialValue = this.getValue();\n\n\t\t/**\n\t\t * The outermost container DOM element for this controller.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.domElement = document.createElement( 'div' );\n\t\tthis.domElement.classList.add( 'controller' );\n\t\tthis.domElement.classList.add( className );\n\n\t\t/**\n\t\t * The DOM element that contains the controller's name.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$name = document.createElement( 'div' );\n\t\tthis.$name.classList.add( 'name' );\n\n\t\tController.nextNameID = Controller.nextNameID || 0;\n\t\tthis.$name.id = `lil-gui-name-${++Controller.nextNameID}`;\n\n\t\t/**\n\t\t * The DOM element that contains the controller's \"widget\" (which differs by controller type).\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$widget = document.createElement( widgetTag );\n\t\tthis.$widget.classList.add( 'widget' );\n\n\t\t/**\n\t\t * The DOM element that receives the disabled attribute when using disable()\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$disable = this.$widget;\n\n\t\tthis.domElement.appendChild( this.$name );\n\t\tthis.domElement.appendChild( this.$widget );\n\n\t\tthis.parent.children.push( this );\n\t\tthis.parent.controllers.push( this );\n\n\t\tthis.parent.$children.appendChild( this.domElement );\n\n\t\tthis._listenCallback = this._listenCallback.bind( this );\n\n\t\tthis.name( property );\n\n\t}\n\n\t/**\n\t * Sets the name of the controller and its label in the GUI.\n\t * @param {string} name\n\t * @returns {this}\n\t */\n\tname( name ) {\n\t\t/**\n\t\t * The controller's name. Use `controller.name( 'Name' )` to modify this value.\n\t\t * @type {string}\n\t\t */\n\t\tthis._name = name;\n\t\tthis.$name.innerHTML = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pass a function to be called whenever the value is modified by this controller.\n\t * The function receives the new value as its first parameter. The value of `this` will be the\n\t * controller.\n\t *\n\t * For function controllers, the `onChange` callback will be fired on click, after the function\n\t * executes.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onChange( function( v ) {\n\t * \tconsole.log( 'The value is now ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */\n\tonChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value directly.\n\t\t * Use the `controller.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onChange = callback;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calls the onChange methods of this controller and its parent GUI.\n\t * @protected\n\t */\n\t_callOnChange() {\n\n\t\tthis.parent._callOnChange( this );\n\n\t\tif ( this._onChange !== undefined ) {\n\t\t\tthis._onChange.call( this, this.getValue() );\n\t\t}\n\n\t\tthis._changed = true;\n\n\t}\n\n\t/**\n\t * Pass a function to be called after this controller has been modified and loses focus.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onFinishChange( function( v ) {\n\t * \tconsole.log( 'Changes complete: ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */\n\tonFinishChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `controller.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onFinishChange = callback;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Should be called by Controller when its widgets lose focus.\n\t * @protected\n\t */\n\t_callOnFinishChange() {\n\n\t\tif ( this._changed ) {\n\n\t\t\tthis.parent._callOnFinishChange( this );\n\n\t\t\tif ( this._onFinishChange !== undefined ) {\n\t\t\t\tthis._onFinishChange.call( this, this.getValue() );\n\t\t\t}\n\n\t\t}\n\n\t\tthis._changed = false;\n\n\t}\n\n\t/**\n\t * Sets the controller back to its initial value.\n\t * @returns {this}\n\t */\n\treset() {\n\t\tthis.setValue( this.initialValue );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Enables this controller.\n\t * @param {boolean} enabled\n\t * @returns {this}\n\t * @example\n\t * controller.enable();\n\t * controller.enable( false ); // disable\n\t * controller.enable( controller._disabled ); // toggle\n\t */\n\tenable( enabled = true ) {\n\t\treturn this.disable( !enabled );\n\t}\n\n\t/**\n\t * Disables this controller.\n\t * @param {boolean} disabled\n\t * @returns {this}\n\t * @example\n\t * controller.disable();\n\t * controller.disable( false ); // enable\n\t * controller.disable( !controller._disabled ); // toggle\n\t */\n\tdisable( disabled = true ) {\n\n\t\tif ( disabled === this._disabled ) return this;\n\n\t\tthis._disabled = disabled;\n\n\t\tthis.domElement.classList.toggle( 'disabled', disabled );\n\t\tthis.$disable.toggleAttribute( 'disabled', disabled );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Shows the Controller after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * controller.show();\n\t * controller.show( false ); // hide\n\t * controller.show( controller._hidden ); // toggle\n\t */\n\tshow( show = true ) {\n\n\t\tthis._hidden = !show;\n\n\t\tthis.domElement.style.display = this._hidden ? 'none' : '';\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Hides the Controller.\n\t * @returns {this}\n\t */\n\thide() {\n\t\treturn this.show( false );\n\t}\n\n\t/**\n\t * Destroys this controller and replaces it with a new option controller. Provided as a more\n\t * descriptive syntax for `gui.add`, but primarily for compatibility with dat.gui.\n\t *\n\t * Use caution, as this method will destroy old references to this controller. It will also\n\t * change controller order if called out of sequence, moving the option controller to the end of\n\t * the GUI.\n\t * @example\n\t * // safe usage\n\t *\n\t * gui.add( object1, 'property' ).options( [ 'a', 'b', 'c' ] );\n\t * gui.add( object2, 'property' );\n\t *\n\t * // danger\n\t *\n\t * const c = gui.add( object1, 'property' );\n\t * gui.add( object2, 'property' );\n\t *\n\t * c.options( [ 'a', 'b', 'c' ] );\n\t * // controller is now at the end of the GUI even though it was added first\n\t *\n\t * assert( c.parent.children.indexOf( c ) === -1 )\n\t * // c references a controller that no longer exists\n\t *\n\t * @param {object|Array} options\n\t * @returns {Controller}\n\t */\n\toptions( options ) {\n\t\tconst controller = this.parent.add( this.object, this.property, options );\n\t\tcontroller.name( this._name );\n\t\tthis.destroy();\n\t\treturn controller;\n\t}\n\n\t/**\n\t * Sets the minimum value. Only works on number controllers.\n\t * @param {number} min\n\t * @returns {this}\n\t */\n\tmin( min ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum value. Only works on number controllers.\n\t * @param {number} max\n\t * @returns {this}\n\t */\n\tmax( max ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Values set by this controller will be rounded to multiples of `step`. Only works on number\n\t * controllers.\n\t * @param {number} step\n\t * @returns {this}\n\t */\n\tstep( step ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rounds the displayed value to a fixed number of decimals, without affecting the actual value\n\t * like `step()`. Only works on number controllers.\n\t * @example\n\t * gui.add( object, 'property' ).listen().decimals( 4 );\n\t * @param {number} decimals\n\t * @returns {this}\n\t */\n\tdecimals( decimals ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calls `updateDisplay()` every animation frame. Pass `false` to stop listening.\n\t * @param {boolean} listen\n\t * @returns {this}\n\t */\n\tlisten( listen = true ) {\n\n\t\t/**\n\t\t * Used to determine if the controller is currently listening. Don't modify this value\n\t\t * directly. Use the `controller.listen( true|false )` method instead.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._listening = listen;\n\n\t\tif ( this._listenCallbackID !== undefined ) {\n\t\t\tcancelAnimationFrame( this._listenCallbackID );\n\t\t\tthis._listenCallbackID = undefined;\n\t\t}\n\n\t\tif ( this._listening ) {\n\t\t\tthis._listenCallback();\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_listenCallback() {\n\n\t\tthis._listenCallbackID = requestAnimationFrame( this._listenCallback );\n\n\t\t// To prevent framerate loss, make sure the value has changed before updating the display.\n\t\t// Note: save() is used here instead of getValue() only because of ColorController. The !== operator\n\t\t// won't work for color objects or arrays, but ColorController.save() always returns a string.\n\n\t\tconst curValue = this.save();\n\n\t\tif ( curValue !== this._listenPrevValue ) {\n\t\t\tthis.updateDisplay();\n\t\t}\n\n\t\tthis._listenPrevValue = curValue;\n\n\t}\n\n\t/**\n\t * Returns `object[ property ]`.\n\t * @returns {any}\n\t */\n\tgetValue() {\n\t\treturn this.object[ this.property ];\n\t}\n\n\t/**\n\t * Sets the value of `object[ property ]`, invokes any `onChange` handlers and updates the display.\n\t * @param {any} value\n\t * @returns {this}\n\t */\n\tsetValue( value ) {\n\t\tthis.object[ this.property ] = value;\n\t\tthis._callOnChange();\n\t\tthis.updateDisplay();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates the display to keep it in sync with the current value. Useful for updating your\n\t * controllers when their values have been modified outside of the GUI.\n\t * @returns {this}\n\t */\n\tupdateDisplay() {\n\t\treturn this;\n\t}\n\n\tload( value ) {\n\t\tthis.setValue( value );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\tsave() {\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Destroys this controller and removes it from the parent GUI.\n\t */\n\tdestroy() {\n\t\tthis.listen( false );\n\t\tthis.parent.children.splice( this.parent.children.indexOf( this ), 1 );\n\t\tthis.parent.controllers.splice( this.parent.controllers.indexOf( this ), 1 );\n\t\tthis.parent.$children.removeChild( this.domElement );\n\t}\n\n}\n\nclass BooleanController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'boolean', 'label' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'checkbox' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$input.addEventListener( 'change', () => {\n\t\t\tthis.setValue( this.$input.checked );\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$disable = this.$input;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.checked = this.getValue();\n\t\treturn this;\n\t}\n\n}\n\nfunction normalizeColorString( string ) {\n\n\tlet match, result;\n\n\tif ( match = string.match( /(#|0x)?([a-f0-9]{6})/i ) ) {\n\n\t\tresult = match[ 2 ];\n\n\t} else if ( match = string.match( /rgb\\(\\s*(\\d*)\\s*,\\s*(\\d*)\\s*,\\s*(\\d*)\\s*\\)/ ) ) {\n\n\t\tresult = parseInt( match[ 1 ] ).toString( 16 ).padStart( 2, 0 )\n\t\t\t+ parseInt( match[ 2 ] ).toString( 16 ).padStart( 2, 0 )\n\t\t\t+ parseInt( match[ 3 ] ).toString( 16 ).padStart( 2, 0 );\n\n\t} else if ( match = string.match( /^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i ) ) {\n\n\t\tresult = match[ 1 ] + match[ 1 ] + match[ 2 ] + match[ 2 ] + match[ 3 ] + match[ 3 ];\n\n\t}\n\n\tif ( result ) {\n\t\treturn '#' + result;\n\t}\n\n\treturn false;\n\n}\n\nconst STRING = {\n\tisPrimitive: true,\n\tmatch: v => typeof v === 'string',\n\tfromHexString: normalizeColorString,\n\ttoHexString: normalizeColorString\n};\n\nconst INT = {\n\tisPrimitive: true,\n\tmatch: v => typeof v === 'number',\n\tfromHexString: string => parseInt( string.substring( 1 ), 16 ),\n\ttoHexString: value => '#' + value.toString( 16 ).padStart( 6, 0 )\n};\n\nconst ARRAY = {\n\tisPrimitive: false,\n\t\n\t// The arrow function is here to appease tree shakers like esbuild or webpack.\n\t// See https://esbuild.github.io/api/#tree-shaking\n\tmatch: v => Array.isArray( v ),\n\t\n\tfromHexString( string, target, rgbScale = 1 ) {\n\n\t\tconst int = INT.fromHexString( string );\n\n\t\ttarget[ 0 ] = ( int >> 16 & 255 ) / 255 * rgbScale;\n\t\ttarget[ 1 ] = ( int >> 8 & 255 ) / 255 * rgbScale;\n\t\ttarget[ 2 ] = ( int & 255 ) / 255 * rgbScale;\n\n\t},\n\ttoHexString( [ r, g, b ], rgbScale = 1 ) {\n\n\t\trgbScale = 255 / rgbScale;\n\n\t\tconst int = ( r * rgbScale ) << 16 ^\n\t\t\t( g * rgbScale ) << 8 ^\n\t\t\t( b * rgbScale ) << 0;\n\n\t\treturn INT.toHexString( int );\n\n\t}\n};\n\nconst OBJECT = {\n\tisPrimitive: false,\n\tmatch: v => Object( v ) === v,\n\tfromHexString( string, target, rgbScale = 1 ) {\n\n\t\tconst int = INT.fromHexString( string );\n\n\t\ttarget.r = ( int >> 16 & 255 ) / 255 * rgbScale;\n\t\ttarget.g = ( int >> 8 & 255 ) / 255 * rgbScale;\n\t\ttarget.b = ( int & 255 ) / 255 * rgbScale;\n\n\t},\n\ttoHexString( { r, g, b }, rgbScale = 1 ) {\n\n\t\trgbScale = 255 / rgbScale;\n\n\t\tconst int = ( r * rgbScale ) << 16 ^\n\t\t\t( g * rgbScale ) << 8 ^\n\t\t\t( b * rgbScale ) << 0;\n\n\t\treturn INT.toHexString( int );\n\n\t}\n};\n\nconst FORMATS = [ STRING, INT, ARRAY, OBJECT ];\n\nfunction getColorFormat( value ) {\n\treturn FORMATS.find( format => format.match( value ) );\n}\n\nclass ColorController extends Controller {\n\n\tconstructor( parent, object, property, rgbScale ) {\n\n\t\tsuper( parent, object, property, 'color' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'color' );\n\t\tthis.$input.setAttribute( 'tabindex', -1 );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$text = document.createElement( 'input' );\n\t\tthis.$text.setAttribute( 'type', 'text' );\n\t\tthis.$text.setAttribute( 'spellcheck', 'false' );\n\t\tthis.$text.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$display = document.createElement( 'div' );\n\t\tthis.$display.classList.add( 'display' );\n\n\t\tthis.$display.appendChild( this.$input );\n\t\tthis.$widget.appendChild( this.$display );\n\t\tthis.$widget.appendChild( this.$text );\n\n\t\tthis._format = getColorFormat( this.initialValue );\n\t\tthis._rgbScale = rgbScale;\n\n\t\tthis._initialValueHexString = this.save();\n\t\tthis._textFocused = false;\n\n\t\tthis.$input.addEventListener( 'input', () => {\n\t\t\tthis._setValueFromHexString( this.$input.value );\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'blur', () => {\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'input', () => {\n\t\t\tconst tryParse = normalizeColorString( this.$text.value );\n\t\t\tif ( tryParse ) {\n\t\t\t\tthis._setValueFromHexString( tryParse );\n\t\t\t}\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'focus', () => {\n\t\t\tthis._textFocused = true;\n\t\t\tthis.$text.select();\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'blur', () => {\n\t\t\tthis._textFocused = false;\n\t\t\tthis.updateDisplay();\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$disable = this.$text;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\treset() {\n\t\tthis._setValueFromHexString( this._initialValueHexString );\n\t\treturn this;\n\t}\n\n\t_setValueFromHexString( value ) {\n\n\t\tif ( this._format.isPrimitive ) {\n\n\t\t\tconst newValue = this._format.fromHexString( value );\n\t\t\tthis.setValue( newValue );\n\n\t\t} else {\n\n\t\t\tthis._format.fromHexString( value, this.getValue(), this._rgbScale );\n\t\t\tthis._callOnChange();\n\t\t\tthis.updateDisplay();\n\n\t\t}\n\n\t}\n\n\tsave() {\n\t\treturn this._format.toHexString( this.getValue(), this._rgbScale );\n\t}\n\n\tload( value ) {\n\t\tthis._setValueFromHexString( value );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.value = this._format.toHexString( this.getValue(), this._rgbScale );\n\t\tif ( !this._textFocused ) {\n\t\t\tthis.$text.value = this.$input.value.substring( 1 );\n\t\t}\n\t\tthis.$display.style.backgroundColor = this.$input.value;\n\t\treturn this;\n\t}\n\n}\n\nclass FunctionController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'function' );\n\n\t\t// Buttons are the only case where widget contains name\n\t\tthis.$button = document.createElement( 'button' );\n\t\tthis.$button.appendChild( this.$name );\n\t\tthis.$widget.appendChild( this.$button );\n\n\t\tthis.$button.addEventListener( 'click', e => {\n\t\t\te.preventDefault();\n\t\t\tthis.getValue().call( this.object );\n\t\t\tthis._callOnChange();\n\t\t} );\n\n\t\t// enables :active pseudo class on mobile\n\t\tthis.$button.addEventListener( 'touchstart', () => {}, { passive: true } );\n\n\t\tthis.$disable = this.$button;\n\n\t}\n\n}\n\nclass NumberController extends Controller {\n\n\tconstructor( parent, object, property, min, max, step ) {\n\n\t\tsuper( parent, object, property, 'number' );\n\n\t\tthis._initInput();\n\n\t\tthis.min( min );\n\t\tthis.max( max );\n\n\t\tconst stepExplicit = step !== undefined;\n\t\tthis.step( stepExplicit ? step : this._getImplicitStep(), stepExplicit );\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tdecimals( decimals ) {\n\t\tthis._decimals = decimals;\n\t\tthis.updateDisplay();\n\t\treturn this;\n\t}\n\n\tmin( min ) {\n\t\tthis._min = min;\n\t\tthis._onUpdateMinMax();\n\t\treturn this;\n\t}\n\n\tmax( max ) {\n\t\tthis._max = max;\n\t\tthis._onUpdateMinMax();\n\t\treturn this;\n\t}\n\n\tstep( step, explicit = true ) {\n\t\tthis._step = step;\n\t\tthis._stepExplicit = explicit;\n\t\treturn this;\n\t}\n\n\tupdateDisplay() {\n\n\t\tconst value = this.getValue();\n\n\t\tif ( this._hasSlider ) {\n\n\t\t\tlet percent = ( value - this._min ) / ( this._max - this._min );\n\t\t\tpercent = Math.max( 0, Math.min( percent, 1 ) );\n\n\t\t\tthis.$fill.style.width = percent * 100 + '%';\n\n\t\t}\n\n\t\tif ( !this._inputFocused ) {\n\t\t\tthis.$input.value = this._decimals === undefined ? value : value.toFixed( this._decimals );\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_initInput() {\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'number' );\n\t\tthis.$input.setAttribute( 'step', 'any' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$disable = this.$input;\n\n\t\tconst onInput = () => {\n\n\t\t\tlet value = parseFloat( this.$input.value );\n\n\t\t\tif ( isNaN( value ) ) return;\n\n\t\t\tif ( this._stepExplicit ) {\n\t\t\t\tvalue = this._snap( value );\n\t\t\t}\n\n\t\t\tthis.setValue( this._clamp( value ) );\n\n\t\t};\n\n\t\t// Keys & mouse wheel\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst increment = delta => {\n\n\t\t\tconst value = parseFloat( this.$input.value );\n\n\t\t\tif ( isNaN( value ) ) return;\n\n\t\t\tthis._snapClampSetValue( value + delta );\n\n\t\t\t// Force the input to updateDisplay when it's focused\n\t\t\tthis.$input.value = this.getValue();\n\n\t\t};\n\n\t\tconst onKeyDown = e => {\n\t\t\tif ( e.code === 'Enter' ) {\n\t\t\t\tthis.$input.blur();\n\t\t\t}\n\t\t\tif ( e.code === 'ArrowUp' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._arrowKeyMultiplier( e ) );\n\t\t\t}\n\t\t\tif ( e.code === 'ArrowDown' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._arrowKeyMultiplier( e ) * -1 );\n\t\t\t}\n\t\t};\n\n\t\tconst onWheel = e => {\n\t\t\tif ( this._inputFocused ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._normalizeMouseWheel( e ) );\n\t\t\t}\n\t\t};\n\n\t\t// Vertical drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tlet testingForVerticalDrag = false,\n\t\t\tinitClientX,\n\t\t\tinitClientY,\n\t\t\tprevClientY,\n\t\t\tinitValue,\n\t\t\tdragDelta;\n\n\t\t// Once the mouse is dragged more than DRAG_THRESH px on any axis, we decide\n\t\t// on the user's intent: horizontal means highlight, vertical means drag.\n\t\tconst DRAG_THRESH = 5;\n\n\t\tconst onMouseDown = e => {\n\n\t\t\tinitClientX = e.clientX;\n\t\t\tinitClientY = prevClientY = e.clientY;\n\t\t\ttestingForVerticalDrag = true;\n\n\t\t\tinitValue = this.getValue();\n\t\t\tdragDelta = 0;\n\n\t\t\twindow.addEventListener( 'mousemove', onMouseMove );\n\t\t\twindow.addEventListener( 'mouseup', onMouseUp );\n\n\t\t};\n\n\t\tconst onMouseMove = e => {\n\n\t\t\tif ( testingForVerticalDrag ) {\n\n\t\t\t\tconst dx = e.clientX - initClientX;\n\t\t\t\tconst dy = e.clientY - initClientY;\n\n\t\t\t\tif ( Math.abs( dy ) > DRAG_THRESH ) {\n\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.$input.blur();\n\t\t\t\t\ttestingForVerticalDrag = false;\n\t\t\t\t\tthis._setDraggingStyle( true, 'vertical' );\n\n\t\t\t\t} else if ( Math.abs( dx ) > DRAG_THRESH ) {\n\n\t\t\t\t\tonMouseUp();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// This isn't an else so that the first move counts towards dragDelta\n\t\t\tif ( !testingForVerticalDrag ) {\n\n\t\t\t\tconst dy = e.clientY - prevClientY;\n\n\t\t\t\tdragDelta -= dy * this._step * this._arrowKeyMultiplier( e );\n\n\t\t\t\t// Clamp dragDelta so we don't have 'dead space' after dragging past bounds.\n\t\t\t\t// We're okay with the fact that bounds can be undefined here.\n\t\t\t\tif ( initValue + dragDelta > this._max ) {\n\t\t\t\t\tdragDelta = this._max - initValue;\n\t\t\t\t} else if ( initValue + dragDelta < this._min ) {\n\t\t\t\t\tdragDelta = this._min - initValue;\n\t\t\t\t}\n\n\t\t\t\tthis._snapClampSetValue( initValue + dragDelta );\n\n\t\t\t}\n\n\t\t\tprevClientY = e.clientY;\n\n\t\t};\n\n\t\tconst onMouseUp = () => {\n\t\t\tthis._setDraggingStyle( false, 'vertical' );\n\t\t\tthis._callOnFinishChange();\n\t\t\twindow.removeEventListener( 'mousemove', onMouseMove );\n\t\t\twindow.removeEventListener( 'mouseup', onMouseUp );\n\t\t};\n\n\t\t// Focus state & onFinishChange\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst onFocus = () => {\n\t\t\tthis._inputFocused = true;\n\t\t};\n\n\t\tconst onBlur = () => {\n\t\t\tthis._inputFocused = false;\n\t\t\tthis.updateDisplay();\n\t\t\tthis._callOnFinishChange();\n\t\t};\n\n\t\tthis.$input.addEventListener( 'input', onInput );\n\t\tthis.$input.addEventListener( 'keydown', onKeyDown );\n\t\tthis.$input.addEventListener( 'wheel', onWheel, { passive: false } );\n\t\tthis.$input.addEventListener( 'mousedown', onMouseDown );\n\t\tthis.$input.addEventListener( 'focus', onFocus );\n\t\tthis.$input.addEventListener( 'blur', onBlur );\n\n\t}\n\n\t_initSlider() {\n\n\t\tthis._hasSlider = true;\n\n\t\t// Build DOM\n\t\t// ---------------------------------------------------------------------\n\n\t\tthis.$slider = document.createElement( 'div' );\n\t\tthis.$slider.classList.add( 'slider' );\n\n\t\tthis.$fill = document.createElement( 'div' );\n\t\tthis.$fill.classList.add( 'fill' );\n\n\t\tthis.$slider.appendChild( this.$fill );\n\t\tthis.$widget.insertBefore( this.$slider, this.$input );\n\n\t\tthis.domElement.classList.add( 'hasSlider' );\n\n\t\t// Map clientX to value\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst map = ( v, a, b, c, d ) => {\n\t\t\treturn ( v - a ) / ( b - a ) * ( d - c ) + c;\n\t\t};\n\n\t\tconst setValueFromX = clientX => {\n\t\t\tconst rect = this.$slider.getBoundingClientRect();\n\t\t\tlet value = map( clientX, rect.left, rect.right, this._min, this._max );\n\t\t\tthis._snapClampSetValue( value );\n\t\t};\n\n\t\t// Mouse drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst mouseDown = e => {\n\t\t\tthis._setDraggingStyle( true );\n\t\t\tsetValueFromX( e.clientX );\n\t\t\twindow.addEventListener( 'mousemove', mouseMove );\n\t\t\twindow.addEventListener( 'mouseup', mouseUp );\n\t\t};\n\n\t\tconst mouseMove = e => {\n\t\t\tsetValueFromX( e.clientX );\n\t\t};\n\n\t\tconst mouseUp = () => {\n\t\t\tthis._callOnFinishChange();\n\t\t\tthis._setDraggingStyle( false );\n\t\t\twindow.removeEventListener( 'mousemove', mouseMove );\n\t\t\twindow.removeEventListener( 'mouseup', mouseUp );\n\t\t};\n\n\t\t// Touch drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tlet testingForScroll = false, prevClientX, prevClientY;\n\n\t\tconst beginTouchDrag = e => {\n\t\t\te.preventDefault();\n\t\t\tthis._setDraggingStyle( true );\n\t\t\tsetValueFromX( e.touches[ 0 ].clientX );\n\t\t\ttestingForScroll = false;\n\t\t};\n\n\t\tconst onTouchStart = e => {\n\n\t\t\tif ( e.touches.length > 1 ) return;\n\n\t\t\t// If we're in a scrollable container, we should wait for the first\n\t\t\t// touchmove to see if the user is trying to slide or scroll.\n\t\t\tif ( this._hasScrollBar ) {\n\n\t\t\t\tprevClientX = e.touches[ 0 ].clientX;\n\t\t\t\tprevClientY = e.touches[ 0 ].clientY;\n\t\t\t\ttestingForScroll = true;\n\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, we can set the value straight away on touchstart.\n\t\t\t\tbeginTouchDrag( e );\n\n\t\t\t}\n\n\t\t\twindow.addEventListener( 'touchmove', onTouchMove, { passive: false } );\n\t\t\twindow.addEventListener( 'touchend', onTouchEnd );\n\n\t\t};\n\n\t\tconst onTouchMove = e => {\n\n\t\t\tif ( testingForScroll ) {\n\n\t\t\t\tconst dx = e.touches[ 0 ].clientX - prevClientX;\n\t\t\t\tconst dy = e.touches[ 0 ].clientY - prevClientY;\n\n\t\t\t\tif ( Math.abs( dx ) > Math.abs( dy ) ) {\n\n\t\t\t\t\t// We moved horizontally, set the value and stop checking.\n\t\t\t\t\tbeginTouchDrag( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// This was, in fact, an attempt to scroll. Abort.\n\t\t\t\t\twindow.removeEventListener( 'touchmove', onTouchMove );\n\t\t\t\t\twindow.removeEventListener( 'touchend', onTouchEnd );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\te.preventDefault();\n\t\t\t\tsetValueFromX( e.touches[ 0 ].clientX );\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst onTouchEnd = () => {\n\t\t\tthis._callOnFinishChange();\n\t\t\tthis._setDraggingStyle( false );\n\t\t\twindow.removeEventListener( 'touchmove', onTouchMove );\n\t\t\twindow.removeEventListener( 'touchend', onTouchEnd );\n\t\t};\n\n\t\t// Mouse wheel\n\t\t// ---------------------------------------------------------------------\n\n\t\t// We have to use a debounced function to call onFinishChange because\n\t\t// there's no way to tell when the user is \"done\" mouse-wheeling.\n\t\tconst callOnFinishChange = this._callOnFinishChange.bind( this );\n\t\tconst WHEEL_DEBOUNCE_TIME = 400;\n\t\tlet wheelFinishChangeTimeout;\n\n\t\tconst onWheel = e => {\n\n\t\t\t// ignore vertical wheels if there's a scrollbar\n\t\t\tconst isVertical = Math.abs( e.deltaX ) < Math.abs( e.deltaY );\n\t\t\tif ( isVertical && this._hasScrollBar ) return;\n\n\t\t\te.preventDefault();\n\n\t\t\t// set value\n\t\t\tconst delta = this._normalizeMouseWheel( e ) * this._step;\n\t\t\tthis._snapClampSetValue( this.getValue() + delta );\n\n\t\t\t// force the input to updateDisplay when it's focused\n\t\t\tthis.$input.value = this.getValue();\n\n\t\t\t// debounce onFinishChange\n\t\t\tclearTimeout( wheelFinishChangeTimeout );\n\t\t\twheelFinishChangeTimeout = setTimeout( callOnFinishChange, WHEEL_DEBOUNCE_TIME );\n\n\t\t};\n\n\t\tthis.$slider.addEventListener( 'mousedown', mouseDown );\n\t\tthis.$slider.addEventListener( 'touchstart', onTouchStart, { passive: false } );\n\t\tthis.$slider.addEventListener( 'wheel', onWheel, { passive: false } );\n\n\t}\n\n\t_setDraggingStyle( active, axis = 'horizontal' ) {\n\t\tif ( this.$slider ) {\n\t\t\tthis.$slider.classList.toggle( 'active', active );\n\t\t}\n\t\tdocument.body.classList.toggle( 'lil-gui-dragging', active );\n\t\tdocument.body.classList.toggle( `lil-gui-${axis}`, active );\n\t}\n\n\t_getImplicitStep() {\n\n\t\tif ( this._hasMin && this._hasMax ) {\n\t\t\treturn ( this._max - this._min ) / 1000;\n\t\t}\n\n\t\treturn 0.1;\n\n\t}\n\n\t_onUpdateMinMax() {\n\n\t\tif ( !this._hasSlider && this._hasMin && this._hasMax ) {\n\n\t\t\t// If this is the first time we're hearing about min and max\n\t\t\t// and we haven't explicitly stated what our step is, let's\n\t\t\t// update that too.\n\t\t\tif ( !this._stepExplicit ) {\n\t\t\t\tthis.step( this._getImplicitStep(), false );\n\t\t\t}\n\n\t\t\tthis._initSlider();\n\t\t\tthis.updateDisplay();\n\n\t\t}\n\n\t}\n\n\t_normalizeMouseWheel( e ) {\n\n\t\tlet { deltaX, deltaY } = e;\n\n\t\t// Safari and Chrome report weird non-integral values for a notched wheel,\n\t\t// but still expose actual lines scrolled via wheelDelta. Notched wheels\n\t\t// should behave the same way as arrow keys.\n\t\tif ( Math.floor( e.deltaY ) !== e.deltaY && e.wheelDelta ) {\n\t\t\tdeltaX = 0;\n\t\t\tdeltaY = -e.wheelDelta / 120;\n\t\t\tdeltaY *= this._stepExplicit ? 1 : 10;\n\t\t}\n\n\t\tconst wheel = deltaX + -deltaY;\n\n\t\treturn wheel;\n\n\t}\n\n\t_arrowKeyMultiplier( e ) {\n\n\t\tlet mult = this._stepExplicit ? 1 : 10;\n\n\t\tif ( e.shiftKey ) {\n\t\t\tmult *= 10;\n\t\t} else if ( e.altKey ) {\n\t\t\tmult /= 10;\n\t\t}\n\n\t\treturn mult;\n\n\t}\n\n\t_snap( value ) {\n\n\t\t// This would be the logical way to do things, but floating point errors.\n\t\t// return Math.round( value / this._step ) * this._step;\n\n\t\t// Using inverse step solves a lot of them, but not all\n\t\t// const inverseStep = 1 / this._step;\n\t\t// return Math.round( value * inverseStep ) / inverseStep;\n\n\t\t// Not happy about this, but haven't seen it break.\n\t\tconst r = Math.round( value / this._step ) * this._step;\n\t\treturn parseFloat( r.toPrecision( 15 ) );\n\n\t}\n\n\t_clamp( value ) {\n\t\t// either condition is false if min or max is undefined\n\t\tif ( value < this._min ) value = this._min;\n\t\tif ( value > this._max ) value = this._max;\n\t\treturn value;\n\t}\n\n\t_snapClampSetValue( value ) {\n\t\tthis.setValue( this._clamp( this._snap( value ) ) );\n\t}\n\n\tget _hasScrollBar() {\n\t\tconst root = this.parent.root.$children;\n\t\treturn root.scrollHeight > root.clientHeight;\n\t}\n\n\tget _hasMin() {\n\t\treturn this._min !== undefined;\n\t}\n\n\tget _hasMax() {\n\t\treturn this._max !== undefined;\n\t}\n\n}\n\nclass OptionController extends Controller {\n\n\tconstructor( parent, object, property, options ) {\n\n\t\tsuper( parent, object, property, 'option' );\n\n\t\tthis.$select = document.createElement( 'select' );\n\t\tthis.$select.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$display = document.createElement( 'div' );\n\t\tthis.$display.classList.add( 'display' );\n\n\t\tthis._values = Array.isArray( options ) ? options : Object.values( options );\n\t\tthis._names = Array.isArray( options ) ? options : Object.keys( options );\n\n\t\tthis._names.forEach( name => {\n\t\t\tconst $option = document.createElement( 'option' );\n\t\t\t$option.innerHTML = name;\n\t\t\tthis.$select.appendChild( $option );\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'change', () => {\n\t\t\tthis.setValue( this._values[ this.$select.selectedIndex ] );\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'focus', () => {\n\t\t\tthis.$display.classList.add( 'focus' );\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'blur', () => {\n\t\t\tthis.$display.classList.remove( 'focus' );\n\t\t} );\n\n\t\tthis.$widget.appendChild( this.$select );\n\t\tthis.$widget.appendChild( this.$display );\n\n\t\tthis.$disable = this.$select;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tconst value = this.getValue();\n\t\tconst index = this._values.indexOf( value );\n\t\tthis.$select.selectedIndex = index;\n\t\tthis.$display.innerHTML = index === -1 ? value : this._names[ index ];\n\t\treturn this;\n\t}\n\n}\n\nclass StringController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'string' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'text' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$input.addEventListener( 'input', () => {\n\t\t\tthis.setValue( this.$input.value );\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'keydown', e => {\n\t\t\tif ( e.code === 'Enter' ) {\n\t\t\t\tthis.$input.blur();\n\t\t\t}\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'blur', () => {\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$disable = this.$input;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.value = this.getValue();\n\t\treturn this;\n\t}\n\n}\n\nconst stylesheet = `.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, \"Droid Sans Mono\", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean .widget {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: \" \";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: \"lil-gui\";\n  content: \"↕\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background-color: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background-color: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background-color: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: \"lil-gui\";\n  content: \"▾\";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: \"▸\";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: \"Empty\";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui input {\n  -webkit-tap-highlight-color: transparent;\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input::-webkit-outer-spin-button,\n.lil-gui input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.lil-gui input[type=number] {\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  -webkit-appearance: none;\n  height: var(--checkbox-size);\n  width: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: \"lil-gui\";\n  content: \"✓\";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: 1px solid var(--widget-color);\n  text-align: center;\n  line-height: calc(var(--widget-height) - 4px);\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n    border-color: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    border-color: var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: \"lil-gui\";\n  src: url(\"data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==\") format(\"woff\");\n}`;\n\nfunction _injectStyles( cssContent ) {\n\tconst injected = document.createElement( 'style' );\n\tinjected.innerHTML = cssContent;\n\tconst before = document.querySelector( 'head link[rel=stylesheet], head style' );\n\tif ( before ) {\n\t\tdocument.head.insertBefore( injected, before );\n\t} else {\n\t\tdocument.head.appendChild( injected );\n\t}\n}\n\nlet stylesInjected = false;\n\nclass GUI {\n\n\t/**\n\t * Creates a panel that holds controllers.\n\t * @example\n\t * new GUI();\n\t * new GUI( { container: document.getElementById( 'custom' ) } );\n\t *\n\t * @param {object} [options]\n\t * @param {boolean} [options.autoPlace=true]\n\t * Adds the GUI to `document.body` and fixes it to the top right of the page.\n\t *\n\t * @param {HTMLElement} [options.container]\n\t * Adds the GUI to this DOM element. Overrides `autoPlace`.\n\t *\n\t * @param {number} [options.width=245]\n\t * Width of the GUI in pixels, usually set when name labels become too long. Note that you can make\n\t * name labels wider in CSS with `.lil‑gui { ‑‑name‑width: 55% }`\n\t *\n\t * @param {string} [options.title=Controls]\n\t * Name to display in the title bar.\n\t *\n\t * @param {boolean} [options.closeFolders=false]\n\t * Pass `true` to close all folders in this GUI by default.\n\t *\n\t * @param {boolean} [options.injectStyles=true]\n\t * Injects the default stylesheet into the page if this is the first GUI.\n\t * Pass `false` to use your own stylesheet.\n\t *\n\t * @param {number} [options.touchStyles=true]\n\t * Makes controllers larger on touch devices. Pass `false` to disable touch styles.\n\t *\n\t * @param {GUI} [options.parent]\n\t * Adds this GUI as a child in another GUI. Usually this is done for you by `addFolder()`.\n\t *\n\t */\n\tconstructor( {\n\t\tparent,\n\t\tautoPlace = parent === undefined,\n\t\tcontainer,\n\t\twidth,\n\t\ttitle = 'Controls',\n\t\tcloseFolders = false,\n\t\tinjectStyles = true,\n\t\ttouchStyles = true\n\t} = {} ) {\n\n\t\t/**\n\t\t * The GUI containing this folder, or `undefined` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The top level GUI containing this folder, or `this` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.root = parent ? parent.root : this;\n\n\t\t/**\n\t\t * The list of controllers and folders contained by this GUI.\n\t\t * @type {Array<GUI|Controller>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * The list of controllers contained by this GUI.\n\t\t * @type {Array<Controller>}\n\t\t */\n\t\tthis.controllers = [];\n\n\t\t/**\n\t\t * The list of folders contained by this GUI.\n\t\t * @type {Array<GUI>}\n\t\t */\n\t\tthis.folders = [];\n\n\t\t/**\n\t\t * Used to determine if the GUI is closed. Use `gui.open()` or `gui.close()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._closed = false;\n\n\t\t/**\n\t\t * Used to determine if the GUI is hidden. Use `gui.show()` or `gui.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._hidden = false;\n\n\t\t/**\n\t\t * The outermost container element.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.domElement = document.createElement( 'div' );\n\t\tthis.domElement.classList.add( 'lil-gui' );\n\n\t\t/**\n\t\t * The DOM element that contains the title.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$title = document.createElement( 'div' );\n\t\tthis.$title.classList.add( 'title' );\n\t\tthis.$title.setAttribute( 'role', 'button' );\n\t\tthis.$title.setAttribute( 'aria-expanded', true );\n\t\tthis.$title.setAttribute( 'tabindex', 0 );\n\n\t\tthis.$title.addEventListener( 'click', () => this.openAnimated( this._closed ) );\n\t\tthis.$title.addEventListener( 'keydown', e => {\n\t\t\tif ( e.code === 'Enter' || e.code === 'Space' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.$title.click();\n\t\t\t}\n\t\t} );\n\n\t\t// enables :active pseudo class on mobile\n\t\tthis.$title.addEventListener( 'touchstart', () => {}, { passive: true } );\n\n\t\t/**\n\t\t * The DOM element that contains children.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$children = document.createElement( 'div' );\n\t\tthis.$children.classList.add( 'children' );\n\n\t\tthis.domElement.appendChild( this.$title );\n\t\tthis.domElement.appendChild( this.$children );\n\n\t\tthis.title( title );\n\n\t\tif ( touchStyles ) {\n\t\t\tthis.domElement.classList.add( 'allow-touch-styles' );\n\t\t}\n\n\t\tif ( this.parent ) {\n\n\t\t\tthis.parent.children.push( this );\n\t\t\tthis.parent.folders.push( this );\n\n\t\t\tthis.parent.$children.appendChild( this.domElement );\n\n\t\t\t// Stop the constructor early, everything onward only applies to root GUI's\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.domElement.classList.add( 'root' );\n\n\t\t// Inject stylesheet if we haven't done that yet\n\t\tif ( !stylesInjected && injectStyles ) {\n\t\t\t_injectStyles( stylesheet );\n\t\t\tstylesInjected = true;\n\t\t}\n\n\t\tif ( container ) {\n\n\t\t\tcontainer.appendChild( this.domElement );\n\n\t\t} else if ( autoPlace ) {\n\n\t\t\tthis.domElement.classList.add( 'autoPlace' );\n\t\t\tdocument.body.appendChild( this.domElement );\n\n\t\t}\n\n\t\tif ( width ) {\n\t\t\tthis.domElement.style.setProperty( '--width', width + 'px' );\n\t\t}\n\n\t\tthis._closeFolders = closeFolders;\n\n\t\t// Don't fire global key events while typing in the GUI:\n\t\tthis.domElement.addEventListener( 'keydown', e => e.stopPropagation() );\n\t\tthis.domElement.addEventListener( 'keyup', e => e.stopPropagation() );\n\n\t}\n\n\t/**\n\t * Adds a controller to the GUI, inferring controller type using the `typeof` operator.\n\t * @example\n\t * gui.add( object, 'property' );\n\t * gui.add( object, 'number', 0, 100, 1 );\n\t * gui.add( object, 'options', [ 1, 2, 3 ] );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number|object|Array} [$1] Minimum value for number controllers, or the set of\n\t * selectable values for a dropdown.\n\t * @param {number} [max] Maximum value for number controllers.\n\t * @param {number} [step] Step value for number controllers.\n\t * @returns {Controller}\n\t */\n\tadd( object, property, $1, max, step ) {\n\n\t\tif ( Object( $1 ) === $1 ) {\n\n\t\t\treturn new OptionController( this, object, property, $1 );\n\n\t\t}\n\n\t\tconst initialValue = object[ property ];\n\n\t\tswitch ( typeof initialValue ) {\n\n\t\t\tcase 'number':\n\n\t\t\t\treturn new NumberController( this, object, property, $1, max, step );\n\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn new BooleanController( this, object, property );\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn new StringController( this, object, property );\n\n\t\t\tcase 'function':\n\n\t\t\t\treturn new FunctionController( this, object, property );\n\n\t\t}\n\n\t\tconsole.error( `gui.add failed\n\tproperty:`, property, `\n\tobject:`, object, `\n\tvalue:`, initialValue );\n\n\t}\n\n\t/**\n\t * Adds a color controller to the GUI.\n\t * @example\n\t * params = {\n\t * \tcssColor: '#ff00ff',\n\t * \trgbColor: { r: 0, g: 0.2, b: 0.4 },\n\t * \tcustomRange: [ 0, 127, 255 ],\n\t * };\n\t *\n\t * gui.addColor( params, 'cssColor' );\n\t * gui.addColor( params, 'rgbColor' );\n\t * gui.addColor( params, 'customRange', 255 );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number} rgbScale Maximum value for a color channel when using an RGB color. You may\n\t * need to set this to 255 if your colors are too bright.\n\t * @returns {Controller}\n\t */\n\taddColor( object, property, rgbScale = 1 ) {\n\t\treturn new ColorController( this, object, property, rgbScale );\n\t}\n\n\t/**\n\t * Adds a folder to the GUI, which is just another GUI. This method returns\n\t * the nested GUI so you can add controllers to it.\n\t * @example\n\t * const folder = gui.addFolder( 'Position' );\n\t * folder.add( position, 'x' );\n\t * folder.add( position, 'y' );\n\t * folder.add( position, 'z' );\n\t *\n\t * @param {string} title Name to display in the folder's title bar.\n\t * @returns {GUI}\n\t */\n\taddFolder( title ) {\n\t\tconst folder = new GUI( { parent: this, title } );\n\t\tif ( this.root._closeFolders ) folder.close();\n\t\treturn folder;\n\t}\n\n\t/**\n\t * Recalls values that were saved with `gui.save()`.\n\t * @param {object} obj\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */\n\tload( obj, recursive = true ) {\n\n\t\tif ( obj.controllers ) {\n\n\t\t\tthis.controllers.forEach( c => {\n\n\t\t\t\tif ( c instanceof FunctionController ) return;\n\n\t\t\t\tif ( c._name in obj.controllers ) {\n\t\t\t\t\tc.load( obj.controllers[ c._name ] );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( recursive && obj.folders ) {\n\n\t\t\tthis.folders.forEach( f => {\n\n\t\t\t\tif ( f._title in obj.folders ) {\n\t\t\t\t\tf.load( obj.folders[ f._title ] );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an object mapping controller names to values. The object can be passed to `gui.load()` to\n\t * recall these values.\n\t * @example\n\t * {\n\t * \tcontrollers: {\n\t * \t\tprop1: 1,\n\t * \t\tprop2: 'value',\n\t * \t\t...\n\t * \t},\n\t * \tfolders: {\n\t * \t\tfolderName1: { controllers, folders },\n\t * \t\tfolderName2: { controllers, folders }\n\t * \t\t...\n\t * \t}\n\t * }\n\t *\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {object}\n\t */\n\tsave( recursive = true ) {\n\n\t\tconst obj = {\n\t\t\tcontrollers: {},\n\t\t\tfolders: {}\n\t\t};\n\n\t\tthis.controllers.forEach( c => {\n\n\t\t\tif ( c instanceof FunctionController ) return;\n\n\t\t\tif ( c._name in obj.controllers ) {\n\t\t\t\tthrow new Error( `Cannot save GUI with duplicate property \"${c._name}\"` );\n\t\t\t}\n\n\t\t\tobj.controllers[ c._name ] = c.save();\n\n\t\t} );\n\n\t\tif ( recursive ) {\n\n\t\t\tthis.folders.forEach( f => {\n\n\t\t\t\tif ( f._title in obj.folders ) {\n\t\t\t\t\tthrow new Error( `Cannot save GUI with duplicate folder \"${f._title}\"` );\n\t\t\t\t}\n\n\t\t\t\tobj.folders[ f._title ] = f.save();\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn obj;\n\n\t}\n\n\t/**\n\t * Opens a GUI or folder. GUI and folders are open by default.\n\t * @param {boolean} open Pass false to close\n\t * @returns {this}\n\t * @example\n\t * gui.open(); // open\n\t * gui.open( false ); // close\n\t * gui.open( gui._closed ); // toggle\n\t */\n\topen( open = true ) {\n\n\t\tthis._setClosed( !open );\n\n\t\tthis.$title.setAttribute( 'aria-expanded', !this._closed );\n\t\tthis.domElement.classList.toggle( 'closed', this._closed );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Closes the GUI.\n\t * @returns {this}\n\t */\n\tclose() {\n\t\treturn this.open( false );\n\t}\n\n\t_setClosed( closed ) {\n\t\tif ( this._closed === closed ) return;\n\t\tthis._closed = closed;\n\t\tthis._callOnOpenClose( this );\n\t}\n\n\t/**\n\t * Shows the GUI after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * gui.show();\n\t * gui.show( false ); // hide\n\t * gui.show( gui._hidden ); // toggle\n\t */\n\tshow( show = true ) {\n\n\t\tthis._hidden = !show;\n\n\t\tthis.domElement.style.display = this._hidden ? 'none' : '';\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Hides the GUI.\n\t * @returns {this}\n\t */\n\thide() {\n\t\treturn this.show( false );\n\t}\n\n\topenAnimated( open = true ) {\n\n\t\t// set state immediately\n\t\tthis._setClosed( !open );\n\n\t\tthis.$title.setAttribute( 'aria-expanded', !this._closed );\n\n\t\t// wait for next frame to measure $children\n\t\trequestAnimationFrame( () => {\n\n\t\t\t// explicitly set initial height for transition\n\t\t\tconst initialHeight = this.$children.clientHeight;\n\t\t\tthis.$children.style.height = initialHeight + 'px';\n\n\t\t\tthis.domElement.classList.add( 'transition' );\n\n\t\t\tconst onTransitionEnd = e => {\n\t\t\t\tif ( e.target !== this.$children ) return;\n\t\t\t\tthis.$children.style.height = '';\n\t\t\t\tthis.domElement.classList.remove( 'transition' );\n\t\t\t\tthis.$children.removeEventListener( 'transitionend', onTransitionEnd );\n\t\t\t};\n\n\t\t\tthis.$children.addEventListener( 'transitionend', onTransitionEnd );\n\n\t\t\t// todo: this is wrong if children's scrollHeight makes for a gui taller than maxHeight\n\t\t\tconst targetHeight = !open ? 0 : this.$children.scrollHeight;\n\n\t\t\tthis.domElement.classList.toggle( 'closed', !open );\n\n\t\t\trequestAnimationFrame( () => {\n\t\t\t\tthis.$children.style.height = targetHeight + 'px';\n\t\t\t} );\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Change the title of this GUI.\n\t * @param {string} title\n\t * @returns {this}\n\t */\n\ttitle( title ) {\n\t\t/**\n\t\t * Current title of the GUI. Use `gui.title( 'Title' )` to modify this value.\n\t\t * @type {string}\n\t\t */\n\t\tthis._title = title;\n\t\tthis.$title.innerHTML = title;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets all controllers to their initial values.\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */\n\treset( recursive = true ) {\n\t\tconst controllers = recursive ? this.controllersRecursive() : this.controllers;\n\t\tcontrollers.forEach( c => c.reset() );\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pass a function to be called whenever a controller in this GUI changes.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */\n\tonChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onChange = callback;\n\t\treturn this;\n\t}\n\n\t_callOnChange( controller ) {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._callOnChange( controller );\n\t\t}\n\n\t\tif ( this._onChange !== undefined ) {\n\t\t\tthis._onChange.call( this, {\n\t\t\t\tobject: controller.object,\n\t\t\t\tproperty: controller.property,\n\t\t\t\tvalue: controller.getValue(),\n\t\t\t\tcontroller\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pass a function to be called whenever a controller in this GUI has finished changing.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onFinishChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */\n\tonFinishChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onFinishChange = callback;\n\t\treturn this;\n\t}\n\n\t_callOnFinishChange( controller ) {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._callOnFinishChange( controller );\n\t\t}\n\n\t\tif ( this._onFinishChange !== undefined ) {\n\t\t\tthis._onFinishChange.call( this, {\n\t\t\t\tobject: controller.object,\n\t\t\t\tproperty: controller.property,\n\t\t\t\tvalue: controller.getValue(),\n\t\t\t\tcontroller\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pass a function to be called when this GUI or its descendants are opened or closed.\n\t * @param {function(GUI)} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onOpenClose( changedGUI => {\n\t * \tconsole.log( changedGUI._closed );\n\t * } );\n\t */\n\tonOpenClose( callback ) {\n\t\tthis._onOpenClose = callback;\n\t\treturn this;\n\t}\n\n\t_callOnOpenClose( changedGUI ) {\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._callOnOpenClose( changedGUI );\n\t\t}\n\n\t\tif ( this._onOpenClose !== undefined ) {\n\t\t\tthis._onOpenClose.call( this, changedGUI );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all DOM elements and event listeners associated with this GUI\n\t */\n\tdestroy() {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent.children.splice( this.parent.children.indexOf( this ), 1 );\n\t\t\tthis.parent.folders.splice( this.parent.folders.indexOf( this ), 1 );\n\t\t}\n\n\t\tif ( this.domElement.parentElement ) {\n\t\t\tthis.domElement.parentElement.removeChild( this.domElement );\n\t\t}\n\n\t\tArray.from( this.children ).forEach( c => c.destroy() );\n\n\t}\n\n\t/**\n\t * Returns an array of controllers contained by this GUI and its descendents.\n\t * @returns {Controller[]}\n\t */\n\tcontrollersRecursive() {\n\t\tlet controllers = Array.from( this.controllers );\n\t\tthis.folders.forEach( f => {\n\t\t\tcontrollers = controllers.concat( f.controllersRecursive() );\n\t\t} );\n\t\treturn controllers;\n\t}\n\n\t/**\n\t * Returns an array of folders contained by this GUI and its descendents.\n\t * @returns {GUI[]}\n\t */\n\tfoldersRecursive() {\n\t\tlet folders = Array.from( this.folders );\n\t\tthis.folders.forEach( f => {\n\t\t\tfolders = folders.concat( f.foldersRecursive() );\n\t\t} );\n\t\treturn folders;\n\t}\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GUI);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///899\n")}}]);